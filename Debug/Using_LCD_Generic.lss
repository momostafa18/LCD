
Using_LCD_Generic.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002594  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  00002594  00002608  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001a70  00000000  00000000  00002634  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c66  00000000  00000000  000040a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00004d0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00004e4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00004fba  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00006c03  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00007aee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000889c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  000089fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00008c89  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009457  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e9       	ldi	r30, 0x94	; 148
      68:	f5 e2       	ldi	r31, 0x25	; 37
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 38       	cpi	r26, 0x8A	; 138
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 59 10 	call	0x20b2	; 0x20b2 <main>
      7a:	0c 94 c8 12 	jmp	0x2590	; 0x2590 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 4c 12 	jmp	0x2498	; 0x2498 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a1 e8       	ldi	r26, 0x81	; 129
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 68 12 	jmp	0x24d0	; 0x24d0 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 58 12 	jmp	0x24b0	; 0x24b0 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 74 12 	jmp	0x24e8	; 0x24e8 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 58 12 	jmp	0x24b0	; 0x24b0 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 74 12 	jmp	0x24e8	; 0x24e8 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 4c 12 	jmp	0x2498	; 0x2498 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	81 e8       	ldi	r24, 0x81	; 129
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 68 12 	jmp	0x24d0	; 0x24d0 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 58 12 	jmp	0x24b0	; 0x24b0 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 74 12 	jmp	0x24e8	; 0x24e8 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 58 12 	jmp	0x24b0	; 0x24b0 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 74 12 	jmp	0x24e8	; 0x24e8 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 58 12 	jmp	0x24b0	; 0x24b0 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 74 12 	jmp	0x24e8	; 0x24e8 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 5c 12 	jmp	0x24b8	; 0x24b8 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 78 12 	jmp	0x24f0	; 0x24f0 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	00 d0       	rcall	.+0      	; 0xb3c <GPIO_setupPinDirection+0x6>
     b3c:	00 d0       	rcall	.+0      	; 0xb3e <GPIO_setupPinDirection+0x8>
     b3e:	0f 92       	push	r0
     b40:	cd b7       	in	r28, 0x3d	; 61
     b42:	de b7       	in	r29, 0x3e	; 62
     b44:	89 83       	std	Y+1, r24	; 0x01
     b46:	6a 83       	std	Y+2, r22	; 0x02
     b48:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     b4a:	8a 81       	ldd	r24, Y+2	; 0x02
     b4c:	88 30       	cpi	r24, 0x08	; 8
     b4e:	08 f0       	brcs	.+2      	; 0xb52 <GPIO_setupPinDirection+0x1c>
     b50:	d5 c0       	rjmp	.+426    	; 0xcfc <GPIO_setupPinDirection+0x1c6>
     b52:	89 81       	ldd	r24, Y+1	; 0x01
     b54:	84 30       	cpi	r24, 0x04	; 4
     b56:	08 f0       	brcs	.+2      	; 0xb5a <GPIO_setupPinDirection+0x24>
     b58:	d1 c0       	rjmp	.+418    	; 0xcfc <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     b5a:	89 81       	ldd	r24, Y+1	; 0x01
     b5c:	28 2f       	mov	r18, r24
     b5e:	30 e0       	ldi	r19, 0x00	; 0
     b60:	3d 83       	std	Y+5, r19	; 0x05
     b62:	2c 83       	std	Y+4, r18	; 0x04
     b64:	8c 81       	ldd	r24, Y+4	; 0x04
     b66:	9d 81       	ldd	r25, Y+5	; 0x05
     b68:	81 30       	cpi	r24, 0x01	; 1
     b6a:	91 05       	cpc	r25, r1
     b6c:	09 f4       	brne	.+2      	; 0xb70 <GPIO_setupPinDirection+0x3a>
     b6e:	43 c0       	rjmp	.+134    	; 0xbf6 <GPIO_setupPinDirection+0xc0>
     b70:	2c 81       	ldd	r18, Y+4	; 0x04
     b72:	3d 81       	ldd	r19, Y+5	; 0x05
     b74:	22 30       	cpi	r18, 0x02	; 2
     b76:	31 05       	cpc	r19, r1
     b78:	2c f4       	brge	.+10     	; 0xb84 <GPIO_setupPinDirection+0x4e>
     b7a:	8c 81       	ldd	r24, Y+4	; 0x04
     b7c:	9d 81       	ldd	r25, Y+5	; 0x05
     b7e:	00 97       	sbiw	r24, 0x00	; 0
     b80:	71 f0       	breq	.+28     	; 0xb9e <GPIO_setupPinDirection+0x68>
     b82:	bc c0       	rjmp	.+376    	; 0xcfc <GPIO_setupPinDirection+0x1c6>
     b84:	2c 81       	ldd	r18, Y+4	; 0x04
     b86:	3d 81       	ldd	r19, Y+5	; 0x05
     b88:	22 30       	cpi	r18, 0x02	; 2
     b8a:	31 05       	cpc	r19, r1
     b8c:	09 f4       	brne	.+2      	; 0xb90 <GPIO_setupPinDirection+0x5a>
     b8e:	5f c0       	rjmp	.+190    	; 0xc4e <GPIO_setupPinDirection+0x118>
     b90:	8c 81       	ldd	r24, Y+4	; 0x04
     b92:	9d 81       	ldd	r25, Y+5	; 0x05
     b94:	83 30       	cpi	r24, 0x03	; 3
     b96:	91 05       	cpc	r25, r1
     b98:	09 f4       	brne	.+2      	; 0xb9c <GPIO_setupPinDirection+0x66>
     b9a:	85 c0       	rjmp	.+266    	; 0xca6 <GPIO_setupPinDirection+0x170>
     b9c:	af c0       	rjmp	.+350    	; 0xcfc <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     b9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ba0:	81 30       	cpi	r24, 0x01	; 1
     ba2:	a1 f4       	brne	.+40     	; 0xbcc <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     ba4:	aa e3       	ldi	r26, 0x3A	; 58
     ba6:	b0 e0       	ldi	r27, 0x00	; 0
     ba8:	ea e3       	ldi	r30, 0x3A	; 58
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	80 81       	ld	r24, Z
     bae:	48 2f       	mov	r20, r24
     bb0:	8a 81       	ldd	r24, Y+2	; 0x02
     bb2:	28 2f       	mov	r18, r24
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	02 2e       	mov	r0, r18
     bbc:	02 c0       	rjmp	.+4      	; 0xbc2 <GPIO_setupPinDirection+0x8c>
     bbe:	88 0f       	add	r24, r24
     bc0:	99 1f       	adc	r25, r25
     bc2:	0a 94       	dec	r0
     bc4:	e2 f7       	brpl	.-8      	; 0xbbe <GPIO_setupPinDirection+0x88>
     bc6:	84 2b       	or	r24, r20
     bc8:	8c 93       	st	X, r24
     bca:	98 c0       	rjmp	.+304    	; 0xcfc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     bcc:	aa e3       	ldi	r26, 0x3A	; 58
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	ea e3       	ldi	r30, 0x3A	; 58
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	48 2f       	mov	r20, r24
     bd8:	8a 81       	ldd	r24, Y+2	; 0x02
     bda:	28 2f       	mov	r18, r24
     bdc:	30 e0       	ldi	r19, 0x00	; 0
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	02 2e       	mov	r0, r18
     be4:	02 c0       	rjmp	.+4      	; 0xbea <GPIO_setupPinDirection+0xb4>
     be6:	88 0f       	add	r24, r24
     be8:	99 1f       	adc	r25, r25
     bea:	0a 94       	dec	r0
     bec:	e2 f7       	brpl	.-8      	; 0xbe6 <GPIO_setupPinDirection+0xb0>
     bee:	80 95       	com	r24
     bf0:	84 23       	and	r24, r20
     bf2:	8c 93       	st	X, r24
     bf4:	83 c0       	rjmp	.+262    	; 0xcfc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     bf6:	8b 81       	ldd	r24, Y+3	; 0x03
     bf8:	81 30       	cpi	r24, 0x01	; 1
     bfa:	a1 f4       	brne	.+40     	; 0xc24 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     bfc:	a7 e3       	ldi	r26, 0x37	; 55
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	e7 e3       	ldi	r30, 0x37	; 55
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	80 81       	ld	r24, Z
     c06:	48 2f       	mov	r20, r24
     c08:	8a 81       	ldd	r24, Y+2	; 0x02
     c0a:	28 2f       	mov	r18, r24
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	81 e0       	ldi	r24, 0x01	; 1
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	02 2e       	mov	r0, r18
     c14:	02 c0       	rjmp	.+4      	; 0xc1a <GPIO_setupPinDirection+0xe4>
     c16:	88 0f       	add	r24, r24
     c18:	99 1f       	adc	r25, r25
     c1a:	0a 94       	dec	r0
     c1c:	e2 f7       	brpl	.-8      	; 0xc16 <GPIO_setupPinDirection+0xe0>
     c1e:	84 2b       	or	r24, r20
     c20:	8c 93       	st	X, r24
     c22:	6c c0       	rjmp	.+216    	; 0xcfc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     c24:	a7 e3       	ldi	r26, 0x37	; 55
     c26:	b0 e0       	ldi	r27, 0x00	; 0
     c28:	e7 e3       	ldi	r30, 0x37	; 55
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	80 81       	ld	r24, Z
     c2e:	48 2f       	mov	r20, r24
     c30:	8a 81       	ldd	r24, Y+2	; 0x02
     c32:	28 2f       	mov	r18, r24
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	81 e0       	ldi	r24, 0x01	; 1
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	02 2e       	mov	r0, r18
     c3c:	02 c0       	rjmp	.+4      	; 0xc42 <GPIO_setupPinDirection+0x10c>
     c3e:	88 0f       	add	r24, r24
     c40:	99 1f       	adc	r25, r25
     c42:	0a 94       	dec	r0
     c44:	e2 f7       	brpl	.-8      	; 0xc3e <GPIO_setupPinDirection+0x108>
     c46:	80 95       	com	r24
     c48:	84 23       	and	r24, r20
     c4a:	8c 93       	st	X, r24
     c4c:	57 c0       	rjmp	.+174    	; 0xcfc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     c4e:	8b 81       	ldd	r24, Y+3	; 0x03
     c50:	81 30       	cpi	r24, 0x01	; 1
     c52:	a1 f4       	brne	.+40     	; 0xc7c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     c54:	a4 e3       	ldi	r26, 0x34	; 52
     c56:	b0 e0       	ldi	r27, 0x00	; 0
     c58:	e4 e3       	ldi	r30, 0x34	; 52
     c5a:	f0 e0       	ldi	r31, 0x00	; 0
     c5c:	80 81       	ld	r24, Z
     c5e:	48 2f       	mov	r20, r24
     c60:	8a 81       	ldd	r24, Y+2	; 0x02
     c62:	28 2f       	mov	r18, r24
     c64:	30 e0       	ldi	r19, 0x00	; 0
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	02 2e       	mov	r0, r18
     c6c:	02 c0       	rjmp	.+4      	; 0xc72 <GPIO_setupPinDirection+0x13c>
     c6e:	88 0f       	add	r24, r24
     c70:	99 1f       	adc	r25, r25
     c72:	0a 94       	dec	r0
     c74:	e2 f7       	brpl	.-8      	; 0xc6e <GPIO_setupPinDirection+0x138>
     c76:	84 2b       	or	r24, r20
     c78:	8c 93       	st	X, r24
     c7a:	40 c0       	rjmp	.+128    	; 0xcfc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     c7c:	a4 e3       	ldi	r26, 0x34	; 52
     c7e:	b0 e0       	ldi	r27, 0x00	; 0
     c80:	e4 e3       	ldi	r30, 0x34	; 52
     c82:	f0 e0       	ldi	r31, 0x00	; 0
     c84:	80 81       	ld	r24, Z
     c86:	48 2f       	mov	r20, r24
     c88:	8a 81       	ldd	r24, Y+2	; 0x02
     c8a:	28 2f       	mov	r18, r24
     c8c:	30 e0       	ldi	r19, 0x00	; 0
     c8e:	81 e0       	ldi	r24, 0x01	; 1
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	02 2e       	mov	r0, r18
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <GPIO_setupPinDirection+0x164>
     c96:	88 0f       	add	r24, r24
     c98:	99 1f       	adc	r25, r25
     c9a:	0a 94       	dec	r0
     c9c:	e2 f7       	brpl	.-8      	; 0xc96 <GPIO_setupPinDirection+0x160>
     c9e:	80 95       	com	r24
     ca0:	84 23       	and	r24, r20
     ca2:	8c 93       	st	X, r24
     ca4:	2b c0       	rjmp	.+86     	; 0xcfc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     ca6:	8b 81       	ldd	r24, Y+3	; 0x03
     ca8:	81 30       	cpi	r24, 0x01	; 1
     caa:	a1 f4       	brne	.+40     	; 0xcd4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     cac:	a1 e3       	ldi	r26, 0x31	; 49
     cae:	b0 e0       	ldi	r27, 0x00	; 0
     cb0:	e1 e3       	ldi	r30, 0x31	; 49
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	80 81       	ld	r24, Z
     cb6:	48 2f       	mov	r20, r24
     cb8:	8a 81       	ldd	r24, Y+2	; 0x02
     cba:	28 2f       	mov	r18, r24
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	02 2e       	mov	r0, r18
     cc4:	02 c0       	rjmp	.+4      	; 0xcca <GPIO_setupPinDirection+0x194>
     cc6:	88 0f       	add	r24, r24
     cc8:	99 1f       	adc	r25, r25
     cca:	0a 94       	dec	r0
     ccc:	e2 f7       	brpl	.-8      	; 0xcc6 <GPIO_setupPinDirection+0x190>
     cce:	84 2b       	or	r24, r20
     cd0:	8c 93       	st	X, r24
     cd2:	14 c0       	rjmp	.+40     	; 0xcfc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     cd4:	a1 e3       	ldi	r26, 0x31	; 49
     cd6:	b0 e0       	ldi	r27, 0x00	; 0
     cd8:	e1 e3       	ldi	r30, 0x31	; 49
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	80 81       	ld	r24, Z
     cde:	48 2f       	mov	r20, r24
     ce0:	8a 81       	ldd	r24, Y+2	; 0x02
     ce2:	28 2f       	mov	r18, r24
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	81 e0       	ldi	r24, 0x01	; 1
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	02 2e       	mov	r0, r18
     cec:	02 c0       	rjmp	.+4      	; 0xcf2 <GPIO_setupPinDirection+0x1bc>
     cee:	88 0f       	add	r24, r24
     cf0:	99 1f       	adc	r25, r25
     cf2:	0a 94       	dec	r0
     cf4:	e2 f7       	brpl	.-8      	; 0xcee <GPIO_setupPinDirection+0x1b8>
     cf6:	80 95       	com	r24
     cf8:	84 23       	and	r24, r20
     cfa:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     cfc:	0f 90       	pop	r0
     cfe:	0f 90       	pop	r0
     d00:	0f 90       	pop	r0
     d02:	0f 90       	pop	r0
     d04:	0f 90       	pop	r0
     d06:	cf 91       	pop	r28
     d08:	df 91       	pop	r29
     d0a:	08 95       	ret

00000d0c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     d0c:	df 93       	push	r29
     d0e:	cf 93       	push	r28
     d10:	00 d0       	rcall	.+0      	; 0xd12 <GPIO_writePin+0x6>
     d12:	00 d0       	rcall	.+0      	; 0xd14 <GPIO_writePin+0x8>
     d14:	0f 92       	push	r0
     d16:	cd b7       	in	r28, 0x3d	; 61
     d18:	de b7       	in	r29, 0x3e	; 62
     d1a:	89 83       	std	Y+1, r24	; 0x01
     d1c:	6a 83       	std	Y+2, r22	; 0x02
     d1e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     d20:	8a 81       	ldd	r24, Y+2	; 0x02
     d22:	88 30       	cpi	r24, 0x08	; 8
     d24:	08 f0       	brcs	.+2      	; 0xd28 <GPIO_writePin+0x1c>
     d26:	d5 c0       	rjmp	.+426    	; 0xed2 <GPIO_writePin+0x1c6>
     d28:	89 81       	ldd	r24, Y+1	; 0x01
     d2a:	84 30       	cpi	r24, 0x04	; 4
     d2c:	08 f0       	brcs	.+2      	; 0xd30 <GPIO_writePin+0x24>
     d2e:	d1 c0       	rjmp	.+418    	; 0xed2 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     d30:	89 81       	ldd	r24, Y+1	; 0x01
     d32:	28 2f       	mov	r18, r24
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	3d 83       	std	Y+5, r19	; 0x05
     d38:	2c 83       	std	Y+4, r18	; 0x04
     d3a:	8c 81       	ldd	r24, Y+4	; 0x04
     d3c:	9d 81       	ldd	r25, Y+5	; 0x05
     d3e:	81 30       	cpi	r24, 0x01	; 1
     d40:	91 05       	cpc	r25, r1
     d42:	09 f4       	brne	.+2      	; 0xd46 <GPIO_writePin+0x3a>
     d44:	43 c0       	rjmp	.+134    	; 0xdcc <GPIO_writePin+0xc0>
     d46:	2c 81       	ldd	r18, Y+4	; 0x04
     d48:	3d 81       	ldd	r19, Y+5	; 0x05
     d4a:	22 30       	cpi	r18, 0x02	; 2
     d4c:	31 05       	cpc	r19, r1
     d4e:	2c f4       	brge	.+10     	; 0xd5a <GPIO_writePin+0x4e>
     d50:	8c 81       	ldd	r24, Y+4	; 0x04
     d52:	9d 81       	ldd	r25, Y+5	; 0x05
     d54:	00 97       	sbiw	r24, 0x00	; 0
     d56:	71 f0       	breq	.+28     	; 0xd74 <GPIO_writePin+0x68>
     d58:	bc c0       	rjmp	.+376    	; 0xed2 <GPIO_writePin+0x1c6>
     d5a:	2c 81       	ldd	r18, Y+4	; 0x04
     d5c:	3d 81       	ldd	r19, Y+5	; 0x05
     d5e:	22 30       	cpi	r18, 0x02	; 2
     d60:	31 05       	cpc	r19, r1
     d62:	09 f4       	brne	.+2      	; 0xd66 <GPIO_writePin+0x5a>
     d64:	5f c0       	rjmp	.+190    	; 0xe24 <GPIO_writePin+0x118>
     d66:	8c 81       	ldd	r24, Y+4	; 0x04
     d68:	9d 81       	ldd	r25, Y+5	; 0x05
     d6a:	83 30       	cpi	r24, 0x03	; 3
     d6c:	91 05       	cpc	r25, r1
     d6e:	09 f4       	brne	.+2      	; 0xd72 <GPIO_writePin+0x66>
     d70:	85 c0       	rjmp	.+266    	; 0xe7c <GPIO_writePin+0x170>
     d72:	af c0       	rjmp	.+350    	; 0xed2 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     d74:	8b 81       	ldd	r24, Y+3	; 0x03
     d76:	81 30       	cpi	r24, 0x01	; 1
     d78:	a1 f4       	brne	.+40     	; 0xda2 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     d7a:	ab e3       	ldi	r26, 0x3B	; 59
     d7c:	b0 e0       	ldi	r27, 0x00	; 0
     d7e:	eb e3       	ldi	r30, 0x3B	; 59
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	80 81       	ld	r24, Z
     d84:	48 2f       	mov	r20, r24
     d86:	8a 81       	ldd	r24, Y+2	; 0x02
     d88:	28 2f       	mov	r18, r24
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	02 2e       	mov	r0, r18
     d92:	02 c0       	rjmp	.+4      	; 0xd98 <GPIO_writePin+0x8c>
     d94:	88 0f       	add	r24, r24
     d96:	99 1f       	adc	r25, r25
     d98:	0a 94       	dec	r0
     d9a:	e2 f7       	brpl	.-8      	; 0xd94 <GPIO_writePin+0x88>
     d9c:	84 2b       	or	r24, r20
     d9e:	8c 93       	st	X, r24
     da0:	98 c0       	rjmp	.+304    	; 0xed2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     da2:	ab e3       	ldi	r26, 0x3B	; 59
     da4:	b0 e0       	ldi	r27, 0x00	; 0
     da6:	eb e3       	ldi	r30, 0x3B	; 59
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	80 81       	ld	r24, Z
     dac:	48 2f       	mov	r20, r24
     dae:	8a 81       	ldd	r24, Y+2	; 0x02
     db0:	28 2f       	mov	r18, r24
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	02 2e       	mov	r0, r18
     dba:	02 c0       	rjmp	.+4      	; 0xdc0 <GPIO_writePin+0xb4>
     dbc:	88 0f       	add	r24, r24
     dbe:	99 1f       	adc	r25, r25
     dc0:	0a 94       	dec	r0
     dc2:	e2 f7       	brpl	.-8      	; 0xdbc <GPIO_writePin+0xb0>
     dc4:	80 95       	com	r24
     dc6:	84 23       	and	r24, r20
     dc8:	8c 93       	st	X, r24
     dca:	83 c0       	rjmp	.+262    	; 0xed2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     dcc:	8b 81       	ldd	r24, Y+3	; 0x03
     dce:	81 30       	cpi	r24, 0x01	; 1
     dd0:	a1 f4       	brne	.+40     	; 0xdfa <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     dd2:	a8 e3       	ldi	r26, 0x38	; 56
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	e8 e3       	ldi	r30, 0x38	; 56
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	48 2f       	mov	r20, r24
     dde:	8a 81       	ldd	r24, Y+2	; 0x02
     de0:	28 2f       	mov	r18, r24
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	81 e0       	ldi	r24, 0x01	; 1
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	02 2e       	mov	r0, r18
     dea:	02 c0       	rjmp	.+4      	; 0xdf0 <GPIO_writePin+0xe4>
     dec:	88 0f       	add	r24, r24
     dee:	99 1f       	adc	r25, r25
     df0:	0a 94       	dec	r0
     df2:	e2 f7       	brpl	.-8      	; 0xdec <GPIO_writePin+0xe0>
     df4:	84 2b       	or	r24, r20
     df6:	8c 93       	st	X, r24
     df8:	6c c0       	rjmp	.+216    	; 0xed2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     dfa:	a8 e3       	ldi	r26, 0x38	; 56
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	e8 e3       	ldi	r30, 0x38	; 56
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	48 2f       	mov	r20, r24
     e06:	8a 81       	ldd	r24, Y+2	; 0x02
     e08:	28 2f       	mov	r18, r24
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	02 2e       	mov	r0, r18
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <GPIO_writePin+0x10c>
     e14:	88 0f       	add	r24, r24
     e16:	99 1f       	adc	r25, r25
     e18:	0a 94       	dec	r0
     e1a:	e2 f7       	brpl	.-8      	; 0xe14 <GPIO_writePin+0x108>
     e1c:	80 95       	com	r24
     e1e:	84 23       	and	r24, r20
     e20:	8c 93       	st	X, r24
     e22:	57 c0       	rjmp	.+174    	; 0xed2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     e24:	8b 81       	ldd	r24, Y+3	; 0x03
     e26:	81 30       	cpi	r24, 0x01	; 1
     e28:	a1 f4       	brne	.+40     	; 0xe52 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
     e2a:	a5 e3       	ldi	r26, 0x35	; 53
     e2c:	b0 e0       	ldi	r27, 0x00	; 0
     e2e:	e5 e3       	ldi	r30, 0x35	; 53
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	80 81       	ld	r24, Z
     e34:	48 2f       	mov	r20, r24
     e36:	8a 81       	ldd	r24, Y+2	; 0x02
     e38:	28 2f       	mov	r18, r24
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	02 2e       	mov	r0, r18
     e42:	02 c0       	rjmp	.+4      	; 0xe48 <GPIO_writePin+0x13c>
     e44:	88 0f       	add	r24, r24
     e46:	99 1f       	adc	r25, r25
     e48:	0a 94       	dec	r0
     e4a:	e2 f7       	brpl	.-8      	; 0xe44 <GPIO_writePin+0x138>
     e4c:	84 2b       	or	r24, r20
     e4e:	8c 93       	st	X, r24
     e50:	40 c0       	rjmp	.+128    	; 0xed2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     e52:	a5 e3       	ldi	r26, 0x35	; 53
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e5 e3       	ldi	r30, 0x35	; 53
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	48 2f       	mov	r20, r24
     e5e:	8a 81       	ldd	r24, Y+2	; 0x02
     e60:	28 2f       	mov	r18, r24
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	02 2e       	mov	r0, r18
     e6a:	02 c0       	rjmp	.+4      	; 0xe70 <GPIO_writePin+0x164>
     e6c:	88 0f       	add	r24, r24
     e6e:	99 1f       	adc	r25, r25
     e70:	0a 94       	dec	r0
     e72:	e2 f7       	brpl	.-8      	; 0xe6c <GPIO_writePin+0x160>
     e74:	80 95       	com	r24
     e76:	84 23       	and	r24, r20
     e78:	8c 93       	st	X, r24
     e7a:	2b c0       	rjmp	.+86     	; 0xed2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     e7c:	8b 81       	ldd	r24, Y+3	; 0x03
     e7e:	81 30       	cpi	r24, 0x01	; 1
     e80:	a1 f4       	brne	.+40     	; 0xeaa <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
     e82:	a2 e3       	ldi	r26, 0x32	; 50
     e84:	b0 e0       	ldi	r27, 0x00	; 0
     e86:	e2 e3       	ldi	r30, 0x32	; 50
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	48 2f       	mov	r20, r24
     e8e:	8a 81       	ldd	r24, Y+2	; 0x02
     e90:	28 2f       	mov	r18, r24
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	02 2e       	mov	r0, r18
     e9a:	02 c0       	rjmp	.+4      	; 0xea0 <GPIO_writePin+0x194>
     e9c:	88 0f       	add	r24, r24
     e9e:	99 1f       	adc	r25, r25
     ea0:	0a 94       	dec	r0
     ea2:	e2 f7       	brpl	.-8      	; 0xe9c <GPIO_writePin+0x190>
     ea4:	84 2b       	or	r24, r20
     ea6:	8c 93       	st	X, r24
     ea8:	14 c0       	rjmp	.+40     	; 0xed2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
     eaa:	a2 e3       	ldi	r26, 0x32	; 50
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	e2 e3       	ldi	r30, 0x32	; 50
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	48 2f       	mov	r20, r24
     eb6:	8a 81       	ldd	r24, Y+2	; 0x02
     eb8:	28 2f       	mov	r18, r24
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	02 2e       	mov	r0, r18
     ec2:	02 c0       	rjmp	.+4      	; 0xec8 <GPIO_writePin+0x1bc>
     ec4:	88 0f       	add	r24, r24
     ec6:	99 1f       	adc	r25, r25
     ec8:	0a 94       	dec	r0
     eca:	e2 f7       	brpl	.-8      	; 0xec4 <GPIO_writePin+0x1b8>
     ecc:	80 95       	com	r24
     ece:	84 23       	and	r24, r20
     ed0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     ed2:	0f 90       	pop	r0
     ed4:	0f 90       	pop	r0
     ed6:	0f 90       	pop	r0
     ed8:	0f 90       	pop	r0
     eda:	0f 90       	pop	r0
     edc:	cf 91       	pop	r28
     ede:	df 91       	pop	r29
     ee0:	08 95       	ret

00000ee2 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     ee2:	df 93       	push	r29
     ee4:	cf 93       	push	r28
     ee6:	00 d0       	rcall	.+0      	; 0xee8 <GPIO_readPin+0x6>
     ee8:	00 d0       	rcall	.+0      	; 0xeea <GPIO_readPin+0x8>
     eea:	0f 92       	push	r0
     eec:	cd b7       	in	r28, 0x3d	; 61
     eee:	de b7       	in	r29, 0x3e	; 62
     ef0:	8a 83       	std	Y+2, r24	; 0x02
     ef2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
     ef4:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     ef6:	8b 81       	ldd	r24, Y+3	; 0x03
     ef8:	88 30       	cpi	r24, 0x08	; 8
     efa:	08 f0       	brcs	.+2      	; 0xefe <GPIO_readPin+0x1c>
     efc:	84 c0       	rjmp	.+264    	; 0x1006 <GPIO_readPin+0x124>
     efe:	8a 81       	ldd	r24, Y+2	; 0x02
     f00:	84 30       	cpi	r24, 0x04	; 4
     f02:	08 f0       	brcs	.+2      	; 0xf06 <GPIO_readPin+0x24>
     f04:	80 c0       	rjmp	.+256    	; 0x1006 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
     f06:	8a 81       	ldd	r24, Y+2	; 0x02
     f08:	28 2f       	mov	r18, r24
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	3d 83       	std	Y+5, r19	; 0x05
     f0e:	2c 83       	std	Y+4, r18	; 0x04
     f10:	4c 81       	ldd	r20, Y+4	; 0x04
     f12:	5d 81       	ldd	r21, Y+5	; 0x05
     f14:	41 30       	cpi	r20, 0x01	; 1
     f16:	51 05       	cpc	r21, r1
     f18:	79 f1       	breq	.+94     	; 0xf78 <GPIO_readPin+0x96>
     f1a:	8c 81       	ldd	r24, Y+4	; 0x04
     f1c:	9d 81       	ldd	r25, Y+5	; 0x05
     f1e:	82 30       	cpi	r24, 0x02	; 2
     f20:	91 05       	cpc	r25, r1
     f22:	34 f4       	brge	.+12     	; 0xf30 <GPIO_readPin+0x4e>
     f24:	2c 81       	ldd	r18, Y+4	; 0x04
     f26:	3d 81       	ldd	r19, Y+5	; 0x05
     f28:	21 15       	cp	r18, r1
     f2a:	31 05       	cpc	r19, r1
     f2c:	69 f0       	breq	.+26     	; 0xf48 <GPIO_readPin+0x66>
     f2e:	6b c0       	rjmp	.+214    	; 0x1006 <GPIO_readPin+0x124>
     f30:	4c 81       	ldd	r20, Y+4	; 0x04
     f32:	5d 81       	ldd	r21, Y+5	; 0x05
     f34:	42 30       	cpi	r20, 0x02	; 2
     f36:	51 05       	cpc	r21, r1
     f38:	b9 f1       	breq	.+110    	; 0xfa8 <GPIO_readPin+0xc6>
     f3a:	8c 81       	ldd	r24, Y+4	; 0x04
     f3c:	9d 81       	ldd	r25, Y+5	; 0x05
     f3e:	83 30       	cpi	r24, 0x03	; 3
     f40:	91 05       	cpc	r25, r1
     f42:	09 f4       	brne	.+2      	; 0xf46 <GPIO_readPin+0x64>
     f44:	49 c0       	rjmp	.+146    	; 0xfd8 <GPIO_readPin+0xf6>
     f46:	5f c0       	rjmp	.+190    	; 0x1006 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
     f48:	e9 e3       	ldi	r30, 0x39	; 57
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	28 2f       	mov	r18, r24
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	8b 81       	ldd	r24, Y+3	; 0x03
     f54:	88 2f       	mov	r24, r24
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	a9 01       	movw	r20, r18
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <GPIO_readPin+0x7e>
     f5c:	55 95       	asr	r21
     f5e:	47 95       	ror	r20
     f60:	8a 95       	dec	r24
     f62:	e2 f7       	brpl	.-8      	; 0xf5c <GPIO_readPin+0x7a>
     f64:	ca 01       	movw	r24, r20
     f66:	81 70       	andi	r24, 0x01	; 1
     f68:	90 70       	andi	r25, 0x00	; 0
     f6a:	88 23       	and	r24, r24
     f6c:	19 f0       	breq	.+6      	; 0xf74 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	89 83       	std	Y+1, r24	; 0x01
     f72:	49 c0       	rjmp	.+146    	; 0x1006 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     f74:	19 82       	std	Y+1, r1	; 0x01
     f76:	47 c0       	rjmp	.+142    	; 0x1006 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
     f78:	e6 e3       	ldi	r30, 0x36	; 54
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	28 2f       	mov	r18, r24
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	8b 81       	ldd	r24, Y+3	; 0x03
     f84:	88 2f       	mov	r24, r24
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	a9 01       	movw	r20, r18
     f8a:	02 c0       	rjmp	.+4      	; 0xf90 <GPIO_readPin+0xae>
     f8c:	55 95       	asr	r21
     f8e:	47 95       	ror	r20
     f90:	8a 95       	dec	r24
     f92:	e2 f7       	brpl	.-8      	; 0xf8c <GPIO_readPin+0xaa>
     f94:	ca 01       	movw	r24, r20
     f96:	81 70       	andi	r24, 0x01	; 1
     f98:	90 70       	andi	r25, 0x00	; 0
     f9a:	88 23       	and	r24, r24
     f9c:	19 f0       	breq	.+6      	; 0xfa4 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	89 83       	std	Y+1, r24	; 0x01
     fa2:	31 c0       	rjmp	.+98     	; 0x1006 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     fa4:	19 82       	std	Y+1, r1	; 0x01
     fa6:	2f c0       	rjmp	.+94     	; 0x1006 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
     fa8:	e3 e3       	ldi	r30, 0x33	; 51
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	80 81       	ld	r24, Z
     fae:	28 2f       	mov	r18, r24
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	8b 81       	ldd	r24, Y+3	; 0x03
     fb4:	88 2f       	mov	r24, r24
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	a9 01       	movw	r20, r18
     fba:	02 c0       	rjmp	.+4      	; 0xfc0 <GPIO_readPin+0xde>
     fbc:	55 95       	asr	r21
     fbe:	47 95       	ror	r20
     fc0:	8a 95       	dec	r24
     fc2:	e2 f7       	brpl	.-8      	; 0xfbc <GPIO_readPin+0xda>
     fc4:	ca 01       	movw	r24, r20
     fc6:	81 70       	andi	r24, 0x01	; 1
     fc8:	90 70       	andi	r25, 0x00	; 0
     fca:	88 23       	and	r24, r24
     fcc:	19 f0       	breq	.+6      	; 0xfd4 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	89 83       	std	Y+1, r24	; 0x01
     fd2:	19 c0       	rjmp	.+50     	; 0x1006 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     fd4:	19 82       	std	Y+1, r1	; 0x01
     fd6:	17 c0       	rjmp	.+46     	; 0x1006 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
     fd8:	e0 e3       	ldi	r30, 0x30	; 48
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	28 2f       	mov	r18, r24
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	8b 81       	ldd	r24, Y+3	; 0x03
     fe4:	88 2f       	mov	r24, r24
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	a9 01       	movw	r20, r18
     fea:	02 c0       	rjmp	.+4      	; 0xff0 <GPIO_readPin+0x10e>
     fec:	55 95       	asr	r21
     fee:	47 95       	ror	r20
     ff0:	8a 95       	dec	r24
     ff2:	e2 f7       	brpl	.-8      	; 0xfec <GPIO_readPin+0x10a>
     ff4:	ca 01       	movw	r24, r20
     ff6:	81 70       	andi	r24, 0x01	; 1
     ff8:	90 70       	andi	r25, 0x00	; 0
     ffa:	88 23       	and	r24, r24
     ffc:	19 f0       	breq	.+6      	; 0x1004 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	89 83       	std	Y+1, r24	; 0x01
    1002:	01 c0       	rjmp	.+2      	; 0x1006 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1004:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1006:	89 81       	ldd	r24, Y+1	; 0x01
}
    1008:	0f 90       	pop	r0
    100a:	0f 90       	pop	r0
    100c:	0f 90       	pop	r0
    100e:	0f 90       	pop	r0
    1010:	0f 90       	pop	r0
    1012:	cf 91       	pop	r28
    1014:	df 91       	pop	r29
    1016:	08 95       	ret

00001018 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1018:	df 93       	push	r29
    101a:	cf 93       	push	r28
    101c:	00 d0       	rcall	.+0      	; 0x101e <GPIO_setupPortDirection+0x6>
    101e:	00 d0       	rcall	.+0      	; 0x1020 <GPIO_setupPortDirection+0x8>
    1020:	cd b7       	in	r28, 0x3d	; 61
    1022:	de b7       	in	r29, 0x3e	; 62
    1024:	89 83       	std	Y+1, r24	; 0x01
    1026:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1028:	89 81       	ldd	r24, Y+1	; 0x01
    102a:	84 30       	cpi	r24, 0x04	; 4
    102c:	90 f5       	brcc	.+100    	; 0x1092 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    102e:	89 81       	ldd	r24, Y+1	; 0x01
    1030:	28 2f       	mov	r18, r24
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	3c 83       	std	Y+4, r19	; 0x04
    1036:	2b 83       	std	Y+3, r18	; 0x03
    1038:	8b 81       	ldd	r24, Y+3	; 0x03
    103a:	9c 81       	ldd	r25, Y+4	; 0x04
    103c:	81 30       	cpi	r24, 0x01	; 1
    103e:	91 05       	cpc	r25, r1
    1040:	d1 f0       	breq	.+52     	; 0x1076 <GPIO_setupPortDirection+0x5e>
    1042:	2b 81       	ldd	r18, Y+3	; 0x03
    1044:	3c 81       	ldd	r19, Y+4	; 0x04
    1046:	22 30       	cpi	r18, 0x02	; 2
    1048:	31 05       	cpc	r19, r1
    104a:	2c f4       	brge	.+10     	; 0x1056 <GPIO_setupPortDirection+0x3e>
    104c:	8b 81       	ldd	r24, Y+3	; 0x03
    104e:	9c 81       	ldd	r25, Y+4	; 0x04
    1050:	00 97       	sbiw	r24, 0x00	; 0
    1052:	61 f0       	breq	.+24     	; 0x106c <GPIO_setupPortDirection+0x54>
    1054:	1e c0       	rjmp	.+60     	; 0x1092 <GPIO_setupPortDirection+0x7a>
    1056:	2b 81       	ldd	r18, Y+3	; 0x03
    1058:	3c 81       	ldd	r19, Y+4	; 0x04
    105a:	22 30       	cpi	r18, 0x02	; 2
    105c:	31 05       	cpc	r19, r1
    105e:	81 f0       	breq	.+32     	; 0x1080 <GPIO_setupPortDirection+0x68>
    1060:	8b 81       	ldd	r24, Y+3	; 0x03
    1062:	9c 81       	ldd	r25, Y+4	; 0x04
    1064:	83 30       	cpi	r24, 0x03	; 3
    1066:	91 05       	cpc	r25, r1
    1068:	81 f0       	breq	.+32     	; 0x108a <GPIO_setupPortDirection+0x72>
    106a:	13 c0       	rjmp	.+38     	; 0x1092 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    106c:	ea e3       	ldi	r30, 0x3A	; 58
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	8a 81       	ldd	r24, Y+2	; 0x02
    1072:	80 83       	st	Z, r24
    1074:	0e c0       	rjmp	.+28     	; 0x1092 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1076:	e7 e3       	ldi	r30, 0x37	; 55
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	8a 81       	ldd	r24, Y+2	; 0x02
    107c:	80 83       	st	Z, r24
    107e:	09 c0       	rjmp	.+18     	; 0x1092 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1080:	e4 e3       	ldi	r30, 0x34	; 52
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	8a 81       	ldd	r24, Y+2	; 0x02
    1086:	80 83       	st	Z, r24
    1088:	04 c0       	rjmp	.+8      	; 0x1092 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    108a:	e1 e3       	ldi	r30, 0x31	; 49
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	8a 81       	ldd	r24, Y+2	; 0x02
    1090:	80 83       	st	Z, r24
			break;
		}
	}
}
    1092:	0f 90       	pop	r0
    1094:	0f 90       	pop	r0
    1096:	0f 90       	pop	r0
    1098:	0f 90       	pop	r0
    109a:	cf 91       	pop	r28
    109c:	df 91       	pop	r29
    109e:	08 95       	ret

000010a0 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    10a0:	df 93       	push	r29
    10a2:	cf 93       	push	r28
    10a4:	00 d0       	rcall	.+0      	; 0x10a6 <GPIO_writePort+0x6>
    10a6:	00 d0       	rcall	.+0      	; 0x10a8 <GPIO_writePort+0x8>
    10a8:	cd b7       	in	r28, 0x3d	; 61
    10aa:	de b7       	in	r29, 0x3e	; 62
    10ac:	89 83       	std	Y+1, r24	; 0x01
    10ae:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    10b0:	89 81       	ldd	r24, Y+1	; 0x01
    10b2:	84 30       	cpi	r24, 0x04	; 4
    10b4:	90 f5       	brcc	.+100    	; 0x111a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    10b6:	89 81       	ldd	r24, Y+1	; 0x01
    10b8:	28 2f       	mov	r18, r24
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	3c 83       	std	Y+4, r19	; 0x04
    10be:	2b 83       	std	Y+3, r18	; 0x03
    10c0:	8b 81       	ldd	r24, Y+3	; 0x03
    10c2:	9c 81       	ldd	r25, Y+4	; 0x04
    10c4:	81 30       	cpi	r24, 0x01	; 1
    10c6:	91 05       	cpc	r25, r1
    10c8:	d1 f0       	breq	.+52     	; 0x10fe <GPIO_writePort+0x5e>
    10ca:	2b 81       	ldd	r18, Y+3	; 0x03
    10cc:	3c 81       	ldd	r19, Y+4	; 0x04
    10ce:	22 30       	cpi	r18, 0x02	; 2
    10d0:	31 05       	cpc	r19, r1
    10d2:	2c f4       	brge	.+10     	; 0x10de <GPIO_writePort+0x3e>
    10d4:	8b 81       	ldd	r24, Y+3	; 0x03
    10d6:	9c 81       	ldd	r25, Y+4	; 0x04
    10d8:	00 97       	sbiw	r24, 0x00	; 0
    10da:	61 f0       	breq	.+24     	; 0x10f4 <GPIO_writePort+0x54>
    10dc:	1e c0       	rjmp	.+60     	; 0x111a <GPIO_writePort+0x7a>
    10de:	2b 81       	ldd	r18, Y+3	; 0x03
    10e0:	3c 81       	ldd	r19, Y+4	; 0x04
    10e2:	22 30       	cpi	r18, 0x02	; 2
    10e4:	31 05       	cpc	r19, r1
    10e6:	81 f0       	breq	.+32     	; 0x1108 <GPIO_writePort+0x68>
    10e8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ea:	9c 81       	ldd	r25, Y+4	; 0x04
    10ec:	83 30       	cpi	r24, 0x03	; 3
    10ee:	91 05       	cpc	r25, r1
    10f0:	81 f0       	breq	.+32     	; 0x1112 <GPIO_writePort+0x72>
    10f2:	13 c0       	rjmp	.+38     	; 0x111a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    10f4:	eb e3       	ldi	r30, 0x3B	; 59
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	8a 81       	ldd	r24, Y+2	; 0x02
    10fa:	80 83       	st	Z, r24
    10fc:	0e c0       	rjmp	.+28     	; 0x111a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    10fe:	e8 e3       	ldi	r30, 0x38	; 56
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	8a 81       	ldd	r24, Y+2	; 0x02
    1104:	80 83       	st	Z, r24
    1106:	09 c0       	rjmp	.+18     	; 0x111a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1108:	e5 e3       	ldi	r30, 0x35	; 53
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	8a 81       	ldd	r24, Y+2	; 0x02
    110e:	80 83       	st	Z, r24
    1110:	04 c0       	rjmp	.+8      	; 0x111a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1112:	e2 e3       	ldi	r30, 0x32	; 50
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	8a 81       	ldd	r24, Y+2	; 0x02
    1118:	80 83       	st	Z, r24
			break;
		}
	}
}
    111a:	0f 90       	pop	r0
    111c:	0f 90       	pop	r0
    111e:	0f 90       	pop	r0
    1120:	0f 90       	pop	r0
    1122:	cf 91       	pop	r28
    1124:	df 91       	pop	r29
    1126:	08 95       	ret

00001128 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1128:	df 93       	push	r29
    112a:	cf 93       	push	r28
    112c:	00 d0       	rcall	.+0      	; 0x112e <GPIO_readPort+0x6>
    112e:	00 d0       	rcall	.+0      	; 0x1130 <GPIO_readPort+0x8>
    1130:	cd b7       	in	r28, 0x3d	; 61
    1132:	de b7       	in	r29, 0x3e	; 62
    1134:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1136:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1138:	8a 81       	ldd	r24, Y+2	; 0x02
    113a:	84 30       	cpi	r24, 0x04	; 4
    113c:	90 f5       	brcc	.+100    	; 0x11a2 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    113e:	8a 81       	ldd	r24, Y+2	; 0x02
    1140:	28 2f       	mov	r18, r24
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	3c 83       	std	Y+4, r19	; 0x04
    1146:	2b 83       	std	Y+3, r18	; 0x03
    1148:	8b 81       	ldd	r24, Y+3	; 0x03
    114a:	9c 81       	ldd	r25, Y+4	; 0x04
    114c:	81 30       	cpi	r24, 0x01	; 1
    114e:	91 05       	cpc	r25, r1
    1150:	d1 f0       	breq	.+52     	; 0x1186 <GPIO_readPort+0x5e>
    1152:	2b 81       	ldd	r18, Y+3	; 0x03
    1154:	3c 81       	ldd	r19, Y+4	; 0x04
    1156:	22 30       	cpi	r18, 0x02	; 2
    1158:	31 05       	cpc	r19, r1
    115a:	2c f4       	brge	.+10     	; 0x1166 <GPIO_readPort+0x3e>
    115c:	8b 81       	ldd	r24, Y+3	; 0x03
    115e:	9c 81       	ldd	r25, Y+4	; 0x04
    1160:	00 97       	sbiw	r24, 0x00	; 0
    1162:	61 f0       	breq	.+24     	; 0x117c <GPIO_readPort+0x54>
    1164:	1e c0       	rjmp	.+60     	; 0x11a2 <GPIO_readPort+0x7a>
    1166:	2b 81       	ldd	r18, Y+3	; 0x03
    1168:	3c 81       	ldd	r19, Y+4	; 0x04
    116a:	22 30       	cpi	r18, 0x02	; 2
    116c:	31 05       	cpc	r19, r1
    116e:	81 f0       	breq	.+32     	; 0x1190 <GPIO_readPort+0x68>
    1170:	8b 81       	ldd	r24, Y+3	; 0x03
    1172:	9c 81       	ldd	r25, Y+4	; 0x04
    1174:	83 30       	cpi	r24, 0x03	; 3
    1176:	91 05       	cpc	r25, r1
    1178:	81 f0       	breq	.+32     	; 0x119a <GPIO_readPort+0x72>
    117a:	13 c0       	rjmp	.+38     	; 0x11a2 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    117c:	e9 e3       	ldi	r30, 0x39	; 57
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	89 83       	std	Y+1, r24	; 0x01
    1184:	0e c0       	rjmp	.+28     	; 0x11a2 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1186:	e6 e3       	ldi	r30, 0x36	; 54
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	80 81       	ld	r24, Z
    118c:	89 83       	std	Y+1, r24	; 0x01
    118e:	09 c0       	rjmp	.+18     	; 0x11a2 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1190:	e3 e3       	ldi	r30, 0x33	; 51
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	80 81       	ld	r24, Z
    1196:	89 83       	std	Y+1, r24	; 0x01
    1198:	04 c0       	rjmp	.+8      	; 0x11a2 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    119a:	e0 e3       	ldi	r30, 0x30	; 48
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	80 81       	ld	r24, Z
    11a0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    11a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    11a4:	0f 90       	pop	r0
    11a6:	0f 90       	pop	r0
    11a8:	0f 90       	pop	r0
    11aa:	0f 90       	pop	r0
    11ac:	cf 91       	pop	r28
    11ae:	df 91       	pop	r29
    11b0:	08 95       	ret

000011b2 <LCD_init>:
#include <util/delay.h>
#include "common_macros.h"
#include<stdlib.h>

void LCD_init(void)
{
    11b2:	df 93       	push	r29
    11b4:	cf 93       	push	r28
    11b6:	cd b7       	in	r28, 0x3d	; 61
    11b8:	de b7       	in	r29, 0x3e	; 62
    11ba:	2e 97       	sbiw	r28, 0x0e	; 14
    11bc:	0f b6       	in	r0, 0x3f	; 63
    11be:	f8 94       	cli
    11c0:	de bf       	out	0x3e, r29	; 62
    11c2:	0f be       	out	0x3f, r0	; 63
    11c4:	cd bf       	out	0x3d, r28	; 61
	/*Setup for the pin direction of RS and Enable pins as output*/
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    11c6:	80 e0       	ldi	r24, 0x00	; 0
    11c8:	61 e0       	ldi	r22, 0x01	; 1
    11ca:	41 e0       	ldi	r20, 0x01	; 1
    11cc:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_EN_PORT_ID,LCD_EN_PIN_ID,PIN_OUTPUT);
    11d0:	80 e0       	ldi	r24, 0x00	; 0
    11d2:	62 e0       	ldi	r22, 0x02	; 2
    11d4:	41 e0       	ldi	r20, 0x01	; 1
    11d6:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_setupPinDirection>
    11da:	80 e0       	ldi	r24, 0x00	; 0
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	a0 ea       	ldi	r26, 0xA0	; 160
    11e0:	b1 e4       	ldi	r27, 0x41	; 65
    11e2:	8b 87       	std	Y+11, r24	; 0x0b
    11e4:	9c 87       	std	Y+12, r25	; 0x0c
    11e6:	ad 87       	std	Y+13, r26	; 0x0d
    11e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    11ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    11ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    11f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    11f2:	20 e0       	ldi	r18, 0x00	; 0
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	4a e7       	ldi	r20, 0x7A	; 122
    11f8:	55 e4       	ldi	r21, 0x45	; 69
    11fa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11fe:	dc 01       	movw	r26, r24
    1200:	cb 01       	movw	r24, r22
    1202:	8f 83       	std	Y+7, r24	; 0x07
    1204:	98 87       	std	Y+8, r25	; 0x08
    1206:	a9 87       	std	Y+9, r26	; 0x09
    1208:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    120a:	6f 81       	ldd	r22, Y+7	; 0x07
    120c:	78 85       	ldd	r23, Y+8	; 0x08
    120e:	89 85       	ldd	r24, Y+9	; 0x09
    1210:	9a 85       	ldd	r25, Y+10	; 0x0a
    1212:	20 e0       	ldi	r18, 0x00	; 0
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	40 e8       	ldi	r20, 0x80	; 128
    1218:	5f e3       	ldi	r21, 0x3F	; 63
    121a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    121e:	88 23       	and	r24, r24
    1220:	2c f4       	brge	.+10     	; 0x122c <LCD_init+0x7a>
		__ticks = 1;
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	9e 83       	std	Y+6, r25	; 0x06
    1228:	8d 83       	std	Y+5, r24	; 0x05
    122a:	3f c0       	rjmp	.+126    	; 0x12aa <LCD_init+0xf8>
	else if (__tmp > 65535)
    122c:	6f 81       	ldd	r22, Y+7	; 0x07
    122e:	78 85       	ldd	r23, Y+8	; 0x08
    1230:	89 85       	ldd	r24, Y+9	; 0x09
    1232:	9a 85       	ldd	r25, Y+10	; 0x0a
    1234:	20 e0       	ldi	r18, 0x00	; 0
    1236:	3f ef       	ldi	r19, 0xFF	; 255
    1238:	4f e7       	ldi	r20, 0x7F	; 127
    123a:	57 e4       	ldi	r21, 0x47	; 71
    123c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1240:	18 16       	cp	r1, r24
    1242:	4c f5       	brge	.+82     	; 0x1296 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1244:	6b 85       	ldd	r22, Y+11	; 0x0b
    1246:	7c 85       	ldd	r23, Y+12	; 0x0c
    1248:	8d 85       	ldd	r24, Y+13	; 0x0d
    124a:	9e 85       	ldd	r25, Y+14	; 0x0e
    124c:	20 e0       	ldi	r18, 0x00	; 0
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	40 e2       	ldi	r20, 0x20	; 32
    1252:	51 e4       	ldi	r21, 0x41	; 65
    1254:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1258:	dc 01       	movw	r26, r24
    125a:	cb 01       	movw	r24, r22
    125c:	bc 01       	movw	r22, r24
    125e:	cd 01       	movw	r24, r26
    1260:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1264:	dc 01       	movw	r26, r24
    1266:	cb 01       	movw	r24, r22
    1268:	9e 83       	std	Y+6, r25	; 0x06
    126a:	8d 83       	std	Y+5, r24	; 0x05
    126c:	0f c0       	rjmp	.+30     	; 0x128c <LCD_init+0xda>
    126e:	80 e9       	ldi	r24, 0x90	; 144
    1270:	91 e0       	ldi	r25, 0x01	; 1
    1272:	9c 83       	std	Y+4, r25	; 0x04
    1274:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1276:	8b 81       	ldd	r24, Y+3	; 0x03
    1278:	9c 81       	ldd	r25, Y+4	; 0x04
    127a:	01 97       	sbiw	r24, 0x01	; 1
    127c:	f1 f7       	brne	.-4      	; 0x127a <LCD_init+0xc8>
    127e:	9c 83       	std	Y+4, r25	; 0x04
    1280:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1282:	8d 81       	ldd	r24, Y+5	; 0x05
    1284:	9e 81       	ldd	r25, Y+6	; 0x06
    1286:	01 97       	sbiw	r24, 0x01	; 1
    1288:	9e 83       	std	Y+6, r25	; 0x06
    128a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    128c:	8d 81       	ldd	r24, Y+5	; 0x05
    128e:	9e 81       	ldd	r25, Y+6	; 0x06
    1290:	00 97       	sbiw	r24, 0x00	; 0
    1292:	69 f7       	brne	.-38     	; 0x126e <LCD_init+0xbc>
    1294:	14 c0       	rjmp	.+40     	; 0x12be <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1296:	6f 81       	ldd	r22, Y+7	; 0x07
    1298:	78 85       	ldd	r23, Y+8	; 0x08
    129a:	89 85       	ldd	r24, Y+9	; 0x09
    129c:	9a 85       	ldd	r25, Y+10	; 0x0a
    129e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12a2:	dc 01       	movw	r26, r24
    12a4:	cb 01       	movw	r24, r22
    12a6:	9e 83       	std	Y+6, r25	; 0x06
    12a8:	8d 83       	std	Y+5, r24	; 0x05
    12aa:	8d 81       	ldd	r24, Y+5	; 0x05
    12ac:	9e 81       	ldd	r25, Y+6	; 0x06
    12ae:	9a 83       	std	Y+2, r25	; 0x02
    12b0:	89 83       	std	Y+1, r24	; 0x01
    12b2:	89 81       	ldd	r24, Y+1	; 0x01
    12b4:	9a 81       	ldd	r25, Y+2	; 0x02
    12b6:	01 97       	sbiw	r24, 0x01	; 1
    12b8:	f1 f7       	brne	.-4      	; 0x12b6 <LCD_init+0x104>
    12ba:	9a 83       	std	Y+2, r25	; 0x02
    12bc:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20); /*Delaying for 20ms because the LCD power on in 15ms  */
#if(LCD_DATA_BITS_MODE == 4)

	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    12be:	80 e0       	ldi	r24, 0x00	; 0
    12c0:	63 e0       	ldi	r22, 0x03	; 3
    12c2:	41 e0       	ldi	r20, 0x01	; 1
    12c4:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    12c8:	80 e0       	ldi	r24, 0x00	; 0
    12ca:	64 e0       	ldi	r22, 0x04	; 4
    12cc:	41 e0       	ldi	r20, 0x01	; 1
    12ce:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    12d2:	80 e0       	ldi	r24, 0x00	; 0
    12d4:	65 e0       	ldi	r22, 0x05	; 5
    12d6:	41 e0       	ldi	r20, 0x01	; 1
    12d8:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    12dc:	80 e0       	ldi	r24, 0x00	; 0
    12de:	66 e0       	ldi	r22, 0x06	; 6
    12e0:	41 e0       	ldi	r20, 0x01	; 1
    12e2:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_setupPinDirection>

	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    12e6:	83 e3       	ldi	r24, 0x33	; 51
    12e8:	0e 94 8b 09 	call	0x1316	; 0x1316 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    12ec:	82 e3       	ldi	r24, 0x32	; 50
    12ee:	0e 94 8b 09 	call	0x1316	; 0x1316 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    12f2:	88 e2       	ldi	r24, 0x28	; 40
    12f4:	0e 94 8b 09 	call	0x1316	; 0x1316 <LCD_sendCommand>
	/*Setup for the Data port as output*/
    GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
		/*Initialization of 8_bit LCD (Depends on each LCD Where every one has it's own way)*/
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
#endif
	LCD_sendCommand(LCD_CURSOR_OFF);
    12f8:	8c e0       	ldi	r24, 0x0C	; 12
    12fa:	0e 94 8b 09 	call	0x1316	; 0x1316 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	0e 94 8b 09 	call	0x1316	; 0x1316 <LCD_sendCommand>
}
    1304:	2e 96       	adiw	r28, 0x0e	; 14
    1306:	0f b6       	in	r0, 0x3f	; 63
    1308:	f8 94       	cli
    130a:	de bf       	out	0x3e, r29	; 62
    130c:	0f be       	out	0x3f, r0	; 63
    130e:	cd bf       	out	0x3d, r28	; 61
    1310:	cf 91       	pop	r28
    1312:	df 91       	pop	r29
    1314:	08 95       	ret

00001316 <LCD_sendCommand>:
void LCD_sendCommand(uint8 command)
{
    1316:	0f 93       	push	r16
    1318:	1f 93       	push	r17
    131a:	df 93       	push	r29
    131c:	cf 93       	push	r28
    131e:	cd b7       	in	r28, 0x3d	; 61
    1320:	de b7       	in	r29, 0x3e	; 62
    1322:	c7 54       	subi	r28, 0x47	; 71
    1324:	d0 40       	sbci	r29, 0x00	; 0
    1326:	0f b6       	in	r0, 0x3f	; 63
    1328:	f8 94       	cli
    132a:	de bf       	out	0x3e, r29	; 62
    132c:	0f be       	out	0x3f, r0	; 63
    132e:	cd bf       	out	0x3d, r28	; 61
    1330:	fe 01       	movw	r30, r28
    1332:	e9 5b       	subi	r30, 0xB9	; 185
    1334:	ff 4f       	sbci	r31, 0xFF	; 255
    1336:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /*RS=0 for sending Command*/
    1338:	80 e0       	ldi	r24, 0x00	; 0
    133a:	61 e0       	ldi	r22, 0x01	; 1
    133c:	40 e0       	ldi	r20, 0x00	; 0
    133e:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
    1342:	fe 01       	movw	r30, r28
    1344:	ed 5b       	subi	r30, 0xBD	; 189
    1346:	ff 4f       	sbci	r31, 0xFF	; 255
    1348:	80 e0       	ldi	r24, 0x00	; 0
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	a0 e8       	ldi	r26, 0x80	; 128
    134e:	bf e3       	ldi	r27, 0x3F	; 63
    1350:	80 83       	st	Z, r24
    1352:	91 83       	std	Z+1, r25	; 0x01
    1354:	a2 83       	std	Z+2, r26	; 0x02
    1356:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1358:	8e 01       	movw	r16, r28
    135a:	01 5c       	subi	r16, 0xC1	; 193
    135c:	1f 4f       	sbci	r17, 0xFF	; 255
    135e:	fe 01       	movw	r30, r28
    1360:	ed 5b       	subi	r30, 0xBD	; 189
    1362:	ff 4f       	sbci	r31, 0xFF	; 255
    1364:	60 81       	ld	r22, Z
    1366:	71 81       	ldd	r23, Z+1	; 0x01
    1368:	82 81       	ldd	r24, Z+2	; 0x02
    136a:	93 81       	ldd	r25, Z+3	; 0x03
    136c:	20 e0       	ldi	r18, 0x00	; 0
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	4a e7       	ldi	r20, 0x7A	; 122
    1372:	55 e4       	ldi	r21, 0x45	; 69
    1374:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1378:	dc 01       	movw	r26, r24
    137a:	cb 01       	movw	r24, r22
    137c:	f8 01       	movw	r30, r16
    137e:	80 83       	st	Z, r24
    1380:	91 83       	std	Z+1, r25	; 0x01
    1382:	a2 83       	std	Z+2, r26	; 0x02
    1384:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1386:	fe 01       	movw	r30, r28
    1388:	ff 96       	adiw	r30, 0x3f	; 63
    138a:	60 81       	ld	r22, Z
    138c:	71 81       	ldd	r23, Z+1	; 0x01
    138e:	82 81       	ldd	r24, Z+2	; 0x02
    1390:	93 81       	ldd	r25, Z+3	; 0x03
    1392:	20 e0       	ldi	r18, 0x00	; 0
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	40 e8       	ldi	r20, 0x80	; 128
    1398:	5f e3       	ldi	r21, 0x3F	; 63
    139a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    139e:	88 23       	and	r24, r24
    13a0:	2c f4       	brge	.+10     	; 0x13ac <LCD_sendCommand+0x96>
		__ticks = 1;
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	9e af       	std	Y+62, r25	; 0x3e
    13a8:	8d af       	std	Y+61, r24	; 0x3d
    13aa:	46 c0       	rjmp	.+140    	; 0x1438 <LCD_sendCommand+0x122>
	else if (__tmp > 65535)
    13ac:	fe 01       	movw	r30, r28
    13ae:	ff 96       	adiw	r30, 0x3f	; 63
    13b0:	60 81       	ld	r22, Z
    13b2:	71 81       	ldd	r23, Z+1	; 0x01
    13b4:	82 81       	ldd	r24, Z+2	; 0x02
    13b6:	93 81       	ldd	r25, Z+3	; 0x03
    13b8:	20 e0       	ldi	r18, 0x00	; 0
    13ba:	3f ef       	ldi	r19, 0xFF	; 255
    13bc:	4f e7       	ldi	r20, 0x7F	; 127
    13be:	57 e4       	ldi	r21, 0x47	; 71
    13c0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    13c4:	18 16       	cp	r1, r24
    13c6:	64 f5       	brge	.+88     	; 0x1420 <LCD_sendCommand+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13c8:	fe 01       	movw	r30, r28
    13ca:	ed 5b       	subi	r30, 0xBD	; 189
    13cc:	ff 4f       	sbci	r31, 0xFF	; 255
    13ce:	60 81       	ld	r22, Z
    13d0:	71 81       	ldd	r23, Z+1	; 0x01
    13d2:	82 81       	ldd	r24, Z+2	; 0x02
    13d4:	93 81       	ldd	r25, Z+3	; 0x03
    13d6:	20 e0       	ldi	r18, 0x00	; 0
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	40 e2       	ldi	r20, 0x20	; 32
    13dc:	51 e4       	ldi	r21, 0x41	; 65
    13de:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13e2:	dc 01       	movw	r26, r24
    13e4:	cb 01       	movw	r24, r22
    13e6:	bc 01       	movw	r22, r24
    13e8:	cd 01       	movw	r24, r26
    13ea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13ee:	dc 01       	movw	r26, r24
    13f0:	cb 01       	movw	r24, r22
    13f2:	9e af       	std	Y+62, r25	; 0x3e
    13f4:	8d af       	std	Y+61, r24	; 0x3d
    13f6:	0f c0       	rjmp	.+30     	; 0x1416 <LCD_sendCommand+0x100>
    13f8:	80 e9       	ldi	r24, 0x90	; 144
    13fa:	91 e0       	ldi	r25, 0x01	; 1
    13fc:	9c af       	std	Y+60, r25	; 0x3c
    13fe:	8b af       	std	Y+59, r24	; 0x3b
    1400:	8b ad       	ldd	r24, Y+59	; 0x3b
    1402:	9c ad       	ldd	r25, Y+60	; 0x3c
    1404:	01 97       	sbiw	r24, 0x01	; 1
    1406:	f1 f7       	brne	.-4      	; 0x1404 <LCD_sendCommand+0xee>
    1408:	9c af       	std	Y+60, r25	; 0x3c
    140a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    140c:	8d ad       	ldd	r24, Y+61	; 0x3d
    140e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1410:	01 97       	sbiw	r24, 0x01	; 1
    1412:	9e af       	std	Y+62, r25	; 0x3e
    1414:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1416:	8d ad       	ldd	r24, Y+61	; 0x3d
    1418:	9e ad       	ldd	r25, Y+62	; 0x3e
    141a:	00 97       	sbiw	r24, 0x00	; 0
    141c:	69 f7       	brne	.-38     	; 0x13f8 <LCD_sendCommand+0xe2>
    141e:	16 c0       	rjmp	.+44     	; 0x144c <LCD_sendCommand+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1420:	fe 01       	movw	r30, r28
    1422:	ff 96       	adiw	r30, 0x3f	; 63
    1424:	60 81       	ld	r22, Z
    1426:	71 81       	ldd	r23, Z+1	; 0x01
    1428:	82 81       	ldd	r24, Z+2	; 0x02
    142a:	93 81       	ldd	r25, Z+3	; 0x03
    142c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1430:	dc 01       	movw	r26, r24
    1432:	cb 01       	movw	r24, r22
    1434:	9e af       	std	Y+62, r25	; 0x3e
    1436:	8d af       	std	Y+61, r24	; 0x3d
    1438:	8d ad       	ldd	r24, Y+61	; 0x3d
    143a:	9e ad       	ldd	r25, Y+62	; 0x3e
    143c:	9a af       	std	Y+58, r25	; 0x3a
    143e:	89 af       	std	Y+57, r24	; 0x39
    1440:	89 ad       	ldd	r24, Y+57	; 0x39
    1442:	9a ad       	ldd	r25, Y+58	; 0x3a
    1444:	01 97       	sbiw	r24, 0x01	; 1
    1446:	f1 f7       	brne	.-4      	; 0x1444 <LCD_sendCommand+0x12e>
    1448:	9a af       	std	Y+58, r25	; 0x3a
    144a:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	GPIO_writePin(LCD_EN_PORT_ID,LCD_EN_PIN_ID,LOGIC_HIGH);/*E=1 for enabling with LCD*/
    144c:	80 e0       	ldi	r24, 0x00	; 0
    144e:	62 e0       	ldi	r22, 0x02	; 2
    1450:	41 e0       	ldi	r20, 0x01	; 1
    1452:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
    1456:	80 e0       	ldi	r24, 0x00	; 0
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	a0 e8       	ldi	r26, 0x80	; 128
    145c:	bf e3       	ldi	r27, 0x3F	; 63
    145e:	8d ab       	std	Y+53, r24	; 0x35
    1460:	9e ab       	std	Y+54, r25	; 0x36
    1462:	af ab       	std	Y+55, r26	; 0x37
    1464:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1466:	6d a9       	ldd	r22, Y+53	; 0x35
    1468:	7e a9       	ldd	r23, Y+54	; 0x36
    146a:	8f a9       	ldd	r24, Y+55	; 0x37
    146c:	98 ad       	ldd	r25, Y+56	; 0x38
    146e:	20 e0       	ldi	r18, 0x00	; 0
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	4a e7       	ldi	r20, 0x7A	; 122
    1474:	55 e4       	ldi	r21, 0x45	; 69
    1476:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    147a:	dc 01       	movw	r26, r24
    147c:	cb 01       	movw	r24, r22
    147e:	89 ab       	std	Y+49, r24	; 0x31
    1480:	9a ab       	std	Y+50, r25	; 0x32
    1482:	ab ab       	std	Y+51, r26	; 0x33
    1484:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1486:	69 a9       	ldd	r22, Y+49	; 0x31
    1488:	7a a9       	ldd	r23, Y+50	; 0x32
    148a:	8b a9       	ldd	r24, Y+51	; 0x33
    148c:	9c a9       	ldd	r25, Y+52	; 0x34
    148e:	20 e0       	ldi	r18, 0x00	; 0
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	40 e8       	ldi	r20, 0x80	; 128
    1494:	5f e3       	ldi	r21, 0x3F	; 63
    1496:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    149a:	88 23       	and	r24, r24
    149c:	2c f4       	brge	.+10     	; 0x14a8 <LCD_sendCommand+0x192>
		__ticks = 1;
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	98 ab       	std	Y+48, r25	; 0x30
    14a4:	8f a7       	std	Y+47, r24	; 0x2f
    14a6:	3f c0       	rjmp	.+126    	; 0x1526 <LCD_sendCommand+0x210>
	else if (__tmp > 65535)
    14a8:	69 a9       	ldd	r22, Y+49	; 0x31
    14aa:	7a a9       	ldd	r23, Y+50	; 0x32
    14ac:	8b a9       	ldd	r24, Y+51	; 0x33
    14ae:	9c a9       	ldd	r25, Y+52	; 0x34
    14b0:	20 e0       	ldi	r18, 0x00	; 0
    14b2:	3f ef       	ldi	r19, 0xFF	; 255
    14b4:	4f e7       	ldi	r20, 0x7F	; 127
    14b6:	57 e4       	ldi	r21, 0x47	; 71
    14b8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    14bc:	18 16       	cp	r1, r24
    14be:	4c f5       	brge	.+82     	; 0x1512 <LCD_sendCommand+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14c0:	6d a9       	ldd	r22, Y+53	; 0x35
    14c2:	7e a9       	ldd	r23, Y+54	; 0x36
    14c4:	8f a9       	ldd	r24, Y+55	; 0x37
    14c6:	98 ad       	ldd	r25, Y+56	; 0x38
    14c8:	20 e0       	ldi	r18, 0x00	; 0
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	40 e2       	ldi	r20, 0x20	; 32
    14ce:	51 e4       	ldi	r21, 0x41	; 65
    14d0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14d4:	dc 01       	movw	r26, r24
    14d6:	cb 01       	movw	r24, r22
    14d8:	bc 01       	movw	r22, r24
    14da:	cd 01       	movw	r24, r26
    14dc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14e0:	dc 01       	movw	r26, r24
    14e2:	cb 01       	movw	r24, r22
    14e4:	98 ab       	std	Y+48, r25	; 0x30
    14e6:	8f a7       	std	Y+47, r24	; 0x2f
    14e8:	0f c0       	rjmp	.+30     	; 0x1508 <LCD_sendCommand+0x1f2>
    14ea:	80 e9       	ldi	r24, 0x90	; 144
    14ec:	91 e0       	ldi	r25, 0x01	; 1
    14ee:	9e a7       	std	Y+46, r25	; 0x2e
    14f0:	8d a7       	std	Y+45, r24	; 0x2d
    14f2:	8d a5       	ldd	r24, Y+45	; 0x2d
    14f4:	9e a5       	ldd	r25, Y+46	; 0x2e
    14f6:	01 97       	sbiw	r24, 0x01	; 1
    14f8:	f1 f7       	brne	.-4      	; 0x14f6 <LCD_sendCommand+0x1e0>
    14fa:	9e a7       	std	Y+46, r25	; 0x2e
    14fc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1500:	98 a9       	ldd	r25, Y+48	; 0x30
    1502:	01 97       	sbiw	r24, 0x01	; 1
    1504:	98 ab       	std	Y+48, r25	; 0x30
    1506:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1508:	8f a5       	ldd	r24, Y+47	; 0x2f
    150a:	98 a9       	ldd	r25, Y+48	; 0x30
    150c:	00 97       	sbiw	r24, 0x00	; 0
    150e:	69 f7       	brne	.-38     	; 0x14ea <LCD_sendCommand+0x1d4>
    1510:	14 c0       	rjmp	.+40     	; 0x153a <LCD_sendCommand+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1512:	69 a9       	ldd	r22, Y+49	; 0x31
    1514:	7a a9       	ldd	r23, Y+50	; 0x32
    1516:	8b a9       	ldd	r24, Y+51	; 0x33
    1518:	9c a9       	ldd	r25, Y+52	; 0x34
    151a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    151e:	dc 01       	movw	r26, r24
    1520:	cb 01       	movw	r24, r22
    1522:	98 ab       	std	Y+48, r25	; 0x30
    1524:	8f a7       	std	Y+47, r24	; 0x2f
    1526:	8f a5       	ldd	r24, Y+47	; 0x2f
    1528:	98 a9       	ldd	r25, Y+48	; 0x30
    152a:	9c a7       	std	Y+44, r25	; 0x2c
    152c:	8b a7       	std	Y+43, r24	; 0x2b
    152e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1530:	9c a5       	ldd	r25, Y+44	; 0x2c
    1532:	01 97       	sbiw	r24, 0x01	; 1
    1534:	f1 f7       	brne	.-4      	; 0x1532 <LCD_sendCommand+0x21c>
    1536:	9c a7       	std	Y+44, r25	; 0x2c
    1538:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
#if(LCD_DATA_BITS_MODE == 4)
	/* since we are dealing with 4 bit mode we have to send the command twice so we send first
	 the LSB which are form 7 to 4 after this immediately you have to disable the LCD to allow
	 the data sent to pass by the buffer then we send the MSB  */
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    153a:	fe 01       	movw	r30, r28
    153c:	e9 5b       	subi	r30, 0xB9	; 185
    153e:	ff 4f       	sbci	r31, 0xFF	; 255
    1540:	80 81       	ld	r24, Z
    1542:	88 2f       	mov	r24, r24
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	80 71       	andi	r24, 0x10	; 16
    1548:	90 70       	andi	r25, 0x00	; 0
    154a:	95 95       	asr	r25
    154c:	87 95       	ror	r24
    154e:	95 95       	asr	r25
    1550:	87 95       	ror	r24
    1552:	95 95       	asr	r25
    1554:	87 95       	ror	r24
    1556:	95 95       	asr	r25
    1558:	87 95       	ror	r24
    155a:	98 2f       	mov	r25, r24
    155c:	80 e0       	ldi	r24, 0x00	; 0
    155e:	63 e0       	ldi	r22, 0x03	; 3
    1560:	49 2f       	mov	r20, r25
    1562:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    1566:	fe 01       	movw	r30, r28
    1568:	e9 5b       	subi	r30, 0xB9	; 185
    156a:	ff 4f       	sbci	r31, 0xFF	; 255
    156c:	80 81       	ld	r24, Z
    156e:	88 2f       	mov	r24, r24
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	80 72       	andi	r24, 0x20	; 32
    1574:	90 70       	andi	r25, 0x00	; 0
    1576:	95 95       	asr	r25
    1578:	87 95       	ror	r24
    157a:	95 95       	asr	r25
    157c:	87 95       	ror	r24
    157e:	95 95       	asr	r25
    1580:	87 95       	ror	r24
    1582:	95 95       	asr	r25
    1584:	87 95       	ror	r24
    1586:	95 95       	asr	r25
    1588:	87 95       	ror	r24
    158a:	98 2f       	mov	r25, r24
    158c:	80 e0       	ldi	r24, 0x00	; 0
    158e:	64 e0       	ldi	r22, 0x04	; 4
    1590:	49 2f       	mov	r20, r25
    1592:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    1596:	fe 01       	movw	r30, r28
    1598:	e9 5b       	subi	r30, 0xB9	; 185
    159a:	ff 4f       	sbci	r31, 0xFF	; 255
    159c:	80 81       	ld	r24, Z
    159e:	88 2f       	mov	r24, r24
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	80 74       	andi	r24, 0x40	; 64
    15a4:	90 70       	andi	r25, 0x00	; 0
    15a6:	08 2e       	mov	r0, r24
    15a8:	89 2f       	mov	r24, r25
    15aa:	00 0c       	add	r0, r0
    15ac:	88 1f       	adc	r24, r24
    15ae:	99 0b       	sbc	r25, r25
    15b0:	00 0c       	add	r0, r0
    15b2:	88 1f       	adc	r24, r24
    15b4:	99 1f       	adc	r25, r25
    15b6:	98 2f       	mov	r25, r24
    15b8:	80 e0       	ldi	r24, 0x00	; 0
    15ba:	65 e0       	ldi	r22, 0x05	; 5
    15bc:	49 2f       	mov	r20, r25
    15be:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    15c2:	fe 01       	movw	r30, r28
    15c4:	e9 5b       	subi	r30, 0xB9	; 185
    15c6:	ff 4f       	sbci	r31, 0xFF	; 255
    15c8:	80 81       	ld	r24, Z
    15ca:	98 2f       	mov	r25, r24
    15cc:	99 1f       	adc	r25, r25
    15ce:	99 27       	eor	r25, r25
    15d0:	99 1f       	adc	r25, r25
    15d2:	80 e0       	ldi	r24, 0x00	; 0
    15d4:	66 e0       	ldi	r22, 0x06	; 6
    15d6:	49 2f       	mov	r20, r25
    15d8:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>

	GPIO_writePin(LCD_EN_PORT_ID,LCD_EN_PIN_ID,LOGIC_LOW);
    15dc:	80 e0       	ldi	r24, 0x00	; 0
    15de:	62 e0       	ldi	r22, 0x02	; 2
    15e0:	40 e0       	ldi	r20, 0x00	; 0
    15e2:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
    15e6:	80 e0       	ldi	r24, 0x00	; 0
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	a0 e8       	ldi	r26, 0x80	; 128
    15ec:	bf e3       	ldi	r27, 0x3F	; 63
    15ee:	8f a3       	std	Y+39, r24	; 0x27
    15f0:	98 a7       	std	Y+40, r25	; 0x28
    15f2:	a9 a7       	std	Y+41, r26	; 0x29
    15f4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15f6:	6f a1       	ldd	r22, Y+39	; 0x27
    15f8:	78 a5       	ldd	r23, Y+40	; 0x28
    15fa:	89 a5       	ldd	r24, Y+41	; 0x29
    15fc:	9a a5       	ldd	r25, Y+42	; 0x2a
    15fe:	20 e0       	ldi	r18, 0x00	; 0
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	4a e7       	ldi	r20, 0x7A	; 122
    1604:	55 e4       	ldi	r21, 0x45	; 69
    1606:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    160a:	dc 01       	movw	r26, r24
    160c:	cb 01       	movw	r24, r22
    160e:	8b a3       	std	Y+35, r24	; 0x23
    1610:	9c a3       	std	Y+36, r25	; 0x24
    1612:	ad a3       	std	Y+37, r26	; 0x25
    1614:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1616:	6b a1       	ldd	r22, Y+35	; 0x23
    1618:	7c a1       	ldd	r23, Y+36	; 0x24
    161a:	8d a1       	ldd	r24, Y+37	; 0x25
    161c:	9e a1       	ldd	r25, Y+38	; 0x26
    161e:	20 e0       	ldi	r18, 0x00	; 0
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	40 e8       	ldi	r20, 0x80	; 128
    1624:	5f e3       	ldi	r21, 0x3F	; 63
    1626:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    162a:	88 23       	and	r24, r24
    162c:	2c f4       	brge	.+10     	; 0x1638 <LCD_sendCommand+0x322>
		__ticks = 1;
    162e:	81 e0       	ldi	r24, 0x01	; 1
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	9a a3       	std	Y+34, r25	; 0x22
    1634:	89 a3       	std	Y+33, r24	; 0x21
    1636:	3f c0       	rjmp	.+126    	; 0x16b6 <LCD_sendCommand+0x3a0>
	else if (__tmp > 65535)
    1638:	6b a1       	ldd	r22, Y+35	; 0x23
    163a:	7c a1       	ldd	r23, Y+36	; 0x24
    163c:	8d a1       	ldd	r24, Y+37	; 0x25
    163e:	9e a1       	ldd	r25, Y+38	; 0x26
    1640:	20 e0       	ldi	r18, 0x00	; 0
    1642:	3f ef       	ldi	r19, 0xFF	; 255
    1644:	4f e7       	ldi	r20, 0x7F	; 127
    1646:	57 e4       	ldi	r21, 0x47	; 71
    1648:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    164c:	18 16       	cp	r1, r24
    164e:	4c f5       	brge	.+82     	; 0x16a2 <LCD_sendCommand+0x38c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1650:	6f a1       	ldd	r22, Y+39	; 0x27
    1652:	78 a5       	ldd	r23, Y+40	; 0x28
    1654:	89 a5       	ldd	r24, Y+41	; 0x29
    1656:	9a a5       	ldd	r25, Y+42	; 0x2a
    1658:	20 e0       	ldi	r18, 0x00	; 0
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	40 e2       	ldi	r20, 0x20	; 32
    165e:	51 e4       	ldi	r21, 0x41	; 65
    1660:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1664:	dc 01       	movw	r26, r24
    1666:	cb 01       	movw	r24, r22
    1668:	bc 01       	movw	r22, r24
    166a:	cd 01       	movw	r24, r26
    166c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1670:	dc 01       	movw	r26, r24
    1672:	cb 01       	movw	r24, r22
    1674:	9a a3       	std	Y+34, r25	; 0x22
    1676:	89 a3       	std	Y+33, r24	; 0x21
    1678:	0f c0       	rjmp	.+30     	; 0x1698 <LCD_sendCommand+0x382>
    167a:	80 e9       	ldi	r24, 0x90	; 144
    167c:	91 e0       	ldi	r25, 0x01	; 1
    167e:	98 a3       	std	Y+32, r25	; 0x20
    1680:	8f 8f       	std	Y+31, r24	; 0x1f
    1682:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1684:	98 a1       	ldd	r25, Y+32	; 0x20
    1686:	01 97       	sbiw	r24, 0x01	; 1
    1688:	f1 f7       	brne	.-4      	; 0x1686 <LCD_sendCommand+0x370>
    168a:	98 a3       	std	Y+32, r25	; 0x20
    168c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    168e:	89 a1       	ldd	r24, Y+33	; 0x21
    1690:	9a a1       	ldd	r25, Y+34	; 0x22
    1692:	01 97       	sbiw	r24, 0x01	; 1
    1694:	9a a3       	std	Y+34, r25	; 0x22
    1696:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1698:	89 a1       	ldd	r24, Y+33	; 0x21
    169a:	9a a1       	ldd	r25, Y+34	; 0x22
    169c:	00 97       	sbiw	r24, 0x00	; 0
    169e:	69 f7       	brne	.-38     	; 0x167a <LCD_sendCommand+0x364>
    16a0:	14 c0       	rjmp	.+40     	; 0x16ca <LCD_sendCommand+0x3b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16a2:	6b a1       	ldd	r22, Y+35	; 0x23
    16a4:	7c a1       	ldd	r23, Y+36	; 0x24
    16a6:	8d a1       	ldd	r24, Y+37	; 0x25
    16a8:	9e a1       	ldd	r25, Y+38	; 0x26
    16aa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16ae:	dc 01       	movw	r26, r24
    16b0:	cb 01       	movw	r24, r22
    16b2:	9a a3       	std	Y+34, r25	; 0x22
    16b4:	89 a3       	std	Y+33, r24	; 0x21
    16b6:	89 a1       	ldd	r24, Y+33	; 0x21
    16b8:	9a a1       	ldd	r25, Y+34	; 0x22
    16ba:	9e 8f       	std	Y+30, r25	; 0x1e
    16bc:	8d 8f       	std	Y+29, r24	; 0x1d
    16be:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16c0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    16c2:	01 97       	sbiw	r24, 0x01	; 1
    16c4:	f1 f7       	brne	.-4      	; 0x16c2 <LCD_sendCommand+0x3ac>
    16c6:	9e 8f       	std	Y+30, r25	; 0x1e
    16c8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	GPIO_writePin(LCD_EN_PORT_ID,LCD_EN_PIN_ID,LOGIC_HIGH);/*E=0 for disabling with LCD*/
    16ca:	80 e0       	ldi	r24, 0x00	; 0
    16cc:	62 e0       	ldi	r22, 0x02	; 2
    16ce:	41 e0       	ldi	r20, 0x01	; 1
    16d0:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
    16d4:	80 e0       	ldi	r24, 0x00	; 0
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	a0 e8       	ldi	r26, 0x80	; 128
    16da:	bf e3       	ldi	r27, 0x3F	; 63
    16dc:	89 8f       	std	Y+25, r24	; 0x19
    16de:	9a 8f       	std	Y+26, r25	; 0x1a
    16e0:	ab 8f       	std	Y+27, r26	; 0x1b
    16e2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16e4:	69 8d       	ldd	r22, Y+25	; 0x19
    16e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16ec:	20 e0       	ldi	r18, 0x00	; 0
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	4a e7       	ldi	r20, 0x7A	; 122
    16f2:	55 e4       	ldi	r21, 0x45	; 69
    16f4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16f8:	dc 01       	movw	r26, r24
    16fa:	cb 01       	movw	r24, r22
    16fc:	8d 8b       	std	Y+21, r24	; 0x15
    16fe:	9e 8b       	std	Y+22, r25	; 0x16
    1700:	af 8b       	std	Y+23, r26	; 0x17
    1702:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1704:	6d 89       	ldd	r22, Y+21	; 0x15
    1706:	7e 89       	ldd	r23, Y+22	; 0x16
    1708:	8f 89       	ldd	r24, Y+23	; 0x17
    170a:	98 8d       	ldd	r25, Y+24	; 0x18
    170c:	20 e0       	ldi	r18, 0x00	; 0
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	40 e8       	ldi	r20, 0x80	; 128
    1712:	5f e3       	ldi	r21, 0x3F	; 63
    1714:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1718:	88 23       	and	r24, r24
    171a:	2c f4       	brge	.+10     	; 0x1726 <LCD_sendCommand+0x410>
		__ticks = 1;
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	9c 8b       	std	Y+20, r25	; 0x14
    1722:	8b 8b       	std	Y+19, r24	; 0x13
    1724:	3f c0       	rjmp	.+126    	; 0x17a4 <LCD_sendCommand+0x48e>
	else if (__tmp > 65535)
    1726:	6d 89       	ldd	r22, Y+21	; 0x15
    1728:	7e 89       	ldd	r23, Y+22	; 0x16
    172a:	8f 89       	ldd	r24, Y+23	; 0x17
    172c:	98 8d       	ldd	r25, Y+24	; 0x18
    172e:	20 e0       	ldi	r18, 0x00	; 0
    1730:	3f ef       	ldi	r19, 0xFF	; 255
    1732:	4f e7       	ldi	r20, 0x7F	; 127
    1734:	57 e4       	ldi	r21, 0x47	; 71
    1736:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    173a:	18 16       	cp	r1, r24
    173c:	4c f5       	brge	.+82     	; 0x1790 <LCD_sendCommand+0x47a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    173e:	69 8d       	ldd	r22, Y+25	; 0x19
    1740:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1742:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1744:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1746:	20 e0       	ldi	r18, 0x00	; 0
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	40 e2       	ldi	r20, 0x20	; 32
    174c:	51 e4       	ldi	r21, 0x41	; 65
    174e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1752:	dc 01       	movw	r26, r24
    1754:	cb 01       	movw	r24, r22
    1756:	bc 01       	movw	r22, r24
    1758:	cd 01       	movw	r24, r26
    175a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    175e:	dc 01       	movw	r26, r24
    1760:	cb 01       	movw	r24, r22
    1762:	9c 8b       	std	Y+20, r25	; 0x14
    1764:	8b 8b       	std	Y+19, r24	; 0x13
    1766:	0f c0       	rjmp	.+30     	; 0x1786 <LCD_sendCommand+0x470>
    1768:	80 e9       	ldi	r24, 0x90	; 144
    176a:	91 e0       	ldi	r25, 0x01	; 1
    176c:	9a 8b       	std	Y+18, r25	; 0x12
    176e:	89 8b       	std	Y+17, r24	; 0x11
    1770:	89 89       	ldd	r24, Y+17	; 0x11
    1772:	9a 89       	ldd	r25, Y+18	; 0x12
    1774:	01 97       	sbiw	r24, 0x01	; 1
    1776:	f1 f7       	brne	.-4      	; 0x1774 <LCD_sendCommand+0x45e>
    1778:	9a 8b       	std	Y+18, r25	; 0x12
    177a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    177c:	8b 89       	ldd	r24, Y+19	; 0x13
    177e:	9c 89       	ldd	r25, Y+20	; 0x14
    1780:	01 97       	sbiw	r24, 0x01	; 1
    1782:	9c 8b       	std	Y+20, r25	; 0x14
    1784:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1786:	8b 89       	ldd	r24, Y+19	; 0x13
    1788:	9c 89       	ldd	r25, Y+20	; 0x14
    178a:	00 97       	sbiw	r24, 0x00	; 0
    178c:	69 f7       	brne	.-38     	; 0x1768 <LCD_sendCommand+0x452>
    178e:	14 c0       	rjmp	.+40     	; 0x17b8 <LCD_sendCommand+0x4a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1790:	6d 89       	ldd	r22, Y+21	; 0x15
    1792:	7e 89       	ldd	r23, Y+22	; 0x16
    1794:	8f 89       	ldd	r24, Y+23	; 0x17
    1796:	98 8d       	ldd	r25, Y+24	; 0x18
    1798:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    179c:	dc 01       	movw	r26, r24
    179e:	cb 01       	movw	r24, r22
    17a0:	9c 8b       	std	Y+20, r25	; 0x14
    17a2:	8b 8b       	std	Y+19, r24	; 0x13
    17a4:	8b 89       	ldd	r24, Y+19	; 0x13
    17a6:	9c 89       	ldd	r25, Y+20	; 0x14
    17a8:	98 8b       	std	Y+16, r25	; 0x10
    17aa:	8f 87       	std	Y+15, r24	; 0x0f
    17ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    17ae:	98 89       	ldd	r25, Y+16	; 0x10
    17b0:	01 97       	sbiw	r24, 0x01	; 1
    17b2:	f1 f7       	brne	.-4      	; 0x17b0 <LCD_sendCommand+0x49a>
    17b4:	98 8b       	std	Y+16, r25	; 0x10
    17b6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    17b8:	fe 01       	movw	r30, r28
    17ba:	e9 5b       	subi	r30, 0xB9	; 185
    17bc:	ff 4f       	sbci	r31, 0xFF	; 255
    17be:	80 81       	ld	r24, Z
    17c0:	98 2f       	mov	r25, r24
    17c2:	91 70       	andi	r25, 0x01	; 1
    17c4:	80 e0       	ldi	r24, 0x00	; 0
    17c6:	63 e0       	ldi	r22, 0x03	; 3
    17c8:	49 2f       	mov	r20, r25
    17ca:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    17ce:	fe 01       	movw	r30, r28
    17d0:	e9 5b       	subi	r30, 0xB9	; 185
    17d2:	ff 4f       	sbci	r31, 0xFF	; 255
    17d4:	80 81       	ld	r24, Z
    17d6:	88 2f       	mov	r24, r24
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	82 70       	andi	r24, 0x02	; 2
    17dc:	90 70       	andi	r25, 0x00	; 0
    17de:	95 95       	asr	r25
    17e0:	87 95       	ror	r24
    17e2:	98 2f       	mov	r25, r24
    17e4:	80 e0       	ldi	r24, 0x00	; 0
    17e6:	64 e0       	ldi	r22, 0x04	; 4
    17e8:	49 2f       	mov	r20, r25
    17ea:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    17ee:	fe 01       	movw	r30, r28
    17f0:	e9 5b       	subi	r30, 0xB9	; 185
    17f2:	ff 4f       	sbci	r31, 0xFF	; 255
    17f4:	80 81       	ld	r24, Z
    17f6:	88 2f       	mov	r24, r24
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	84 70       	andi	r24, 0x04	; 4
    17fc:	90 70       	andi	r25, 0x00	; 0
    17fe:	95 95       	asr	r25
    1800:	87 95       	ror	r24
    1802:	95 95       	asr	r25
    1804:	87 95       	ror	r24
    1806:	98 2f       	mov	r25, r24
    1808:	80 e0       	ldi	r24, 0x00	; 0
    180a:	65 e0       	ldi	r22, 0x05	; 5
    180c:	49 2f       	mov	r20, r25
    180e:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    1812:	fe 01       	movw	r30, r28
    1814:	e9 5b       	subi	r30, 0xB9	; 185
    1816:	ff 4f       	sbci	r31, 0xFF	; 255
    1818:	80 81       	ld	r24, Z
    181a:	88 2f       	mov	r24, r24
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	88 70       	andi	r24, 0x08	; 8
    1820:	90 70       	andi	r25, 0x00	; 0
    1822:	95 95       	asr	r25
    1824:	87 95       	ror	r24
    1826:	95 95       	asr	r25
    1828:	87 95       	ror	r24
    182a:	95 95       	asr	r25
    182c:	87 95       	ror	r24
    182e:	98 2f       	mov	r25, r24
    1830:	80 e0       	ldi	r24, 0x00	; 0
    1832:	66 e0       	ldi	r22, 0x06	; 6
    1834:	49 2f       	mov	r20, r25
    1836:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command);/*Sending Command*/
	_delay_ms(1);
#endif
	GPIO_writePin(LCD_EN_PORT_ID,LCD_EN_PIN_ID,LOGIC_LOW);/*E=0 for disabling the LCD*/
    183a:	80 e0       	ldi	r24, 0x00	; 0
    183c:	62 e0       	ldi	r22, 0x02	; 2
    183e:	40 e0       	ldi	r20, 0x00	; 0
    1840:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
    1844:	80 e0       	ldi	r24, 0x00	; 0
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	a0 e8       	ldi	r26, 0x80	; 128
    184a:	bf e3       	ldi	r27, 0x3F	; 63
    184c:	8b 87       	std	Y+11, r24	; 0x0b
    184e:	9c 87       	std	Y+12, r25	; 0x0c
    1850:	ad 87       	std	Y+13, r26	; 0x0d
    1852:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1854:	6b 85       	ldd	r22, Y+11	; 0x0b
    1856:	7c 85       	ldd	r23, Y+12	; 0x0c
    1858:	8d 85       	ldd	r24, Y+13	; 0x0d
    185a:	9e 85       	ldd	r25, Y+14	; 0x0e
    185c:	20 e0       	ldi	r18, 0x00	; 0
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	4a e7       	ldi	r20, 0x7A	; 122
    1862:	55 e4       	ldi	r21, 0x45	; 69
    1864:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1868:	dc 01       	movw	r26, r24
    186a:	cb 01       	movw	r24, r22
    186c:	8f 83       	std	Y+7, r24	; 0x07
    186e:	98 87       	std	Y+8, r25	; 0x08
    1870:	a9 87       	std	Y+9, r26	; 0x09
    1872:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1874:	6f 81       	ldd	r22, Y+7	; 0x07
    1876:	78 85       	ldd	r23, Y+8	; 0x08
    1878:	89 85       	ldd	r24, Y+9	; 0x09
    187a:	9a 85       	ldd	r25, Y+10	; 0x0a
    187c:	20 e0       	ldi	r18, 0x00	; 0
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	40 e8       	ldi	r20, 0x80	; 128
    1882:	5f e3       	ldi	r21, 0x3F	; 63
    1884:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1888:	88 23       	and	r24, r24
    188a:	2c f4       	brge	.+10     	; 0x1896 <LCD_sendCommand+0x580>
		__ticks = 1;
    188c:	81 e0       	ldi	r24, 0x01	; 1
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	9e 83       	std	Y+6, r25	; 0x06
    1892:	8d 83       	std	Y+5, r24	; 0x05
    1894:	3f c0       	rjmp	.+126    	; 0x1914 <LCD_sendCommand+0x5fe>
	else if (__tmp > 65535)
    1896:	6f 81       	ldd	r22, Y+7	; 0x07
    1898:	78 85       	ldd	r23, Y+8	; 0x08
    189a:	89 85       	ldd	r24, Y+9	; 0x09
    189c:	9a 85       	ldd	r25, Y+10	; 0x0a
    189e:	20 e0       	ldi	r18, 0x00	; 0
    18a0:	3f ef       	ldi	r19, 0xFF	; 255
    18a2:	4f e7       	ldi	r20, 0x7F	; 127
    18a4:	57 e4       	ldi	r21, 0x47	; 71
    18a6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    18aa:	18 16       	cp	r1, r24
    18ac:	4c f5       	brge	.+82     	; 0x1900 <LCD_sendCommand+0x5ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    18b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    18b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    18b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    18b6:	20 e0       	ldi	r18, 0x00	; 0
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	40 e2       	ldi	r20, 0x20	; 32
    18bc:	51 e4       	ldi	r21, 0x41	; 65
    18be:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18c2:	dc 01       	movw	r26, r24
    18c4:	cb 01       	movw	r24, r22
    18c6:	bc 01       	movw	r22, r24
    18c8:	cd 01       	movw	r24, r26
    18ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18ce:	dc 01       	movw	r26, r24
    18d0:	cb 01       	movw	r24, r22
    18d2:	9e 83       	std	Y+6, r25	; 0x06
    18d4:	8d 83       	std	Y+5, r24	; 0x05
    18d6:	0f c0       	rjmp	.+30     	; 0x18f6 <LCD_sendCommand+0x5e0>
    18d8:	80 e9       	ldi	r24, 0x90	; 144
    18da:	91 e0       	ldi	r25, 0x01	; 1
    18dc:	9c 83       	std	Y+4, r25	; 0x04
    18de:	8b 83       	std	Y+3, r24	; 0x03
    18e0:	8b 81       	ldd	r24, Y+3	; 0x03
    18e2:	9c 81       	ldd	r25, Y+4	; 0x04
    18e4:	01 97       	sbiw	r24, 0x01	; 1
    18e6:	f1 f7       	brne	.-4      	; 0x18e4 <LCD_sendCommand+0x5ce>
    18e8:	9c 83       	std	Y+4, r25	; 0x04
    18ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18ec:	8d 81       	ldd	r24, Y+5	; 0x05
    18ee:	9e 81       	ldd	r25, Y+6	; 0x06
    18f0:	01 97       	sbiw	r24, 0x01	; 1
    18f2:	9e 83       	std	Y+6, r25	; 0x06
    18f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18f6:	8d 81       	ldd	r24, Y+5	; 0x05
    18f8:	9e 81       	ldd	r25, Y+6	; 0x06
    18fa:	00 97       	sbiw	r24, 0x00	; 0
    18fc:	69 f7       	brne	.-38     	; 0x18d8 <LCD_sendCommand+0x5c2>
    18fe:	14 c0       	rjmp	.+40     	; 0x1928 <LCD_sendCommand+0x612>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1900:	6f 81       	ldd	r22, Y+7	; 0x07
    1902:	78 85       	ldd	r23, Y+8	; 0x08
    1904:	89 85       	ldd	r24, Y+9	; 0x09
    1906:	9a 85       	ldd	r25, Y+10	; 0x0a
    1908:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    190c:	dc 01       	movw	r26, r24
    190e:	cb 01       	movw	r24, r22
    1910:	9e 83       	std	Y+6, r25	; 0x06
    1912:	8d 83       	std	Y+5, r24	; 0x05
    1914:	8d 81       	ldd	r24, Y+5	; 0x05
    1916:	9e 81       	ldd	r25, Y+6	; 0x06
    1918:	9a 83       	std	Y+2, r25	; 0x02
    191a:	89 83       	std	Y+1, r24	; 0x01
    191c:	89 81       	ldd	r24, Y+1	; 0x01
    191e:	9a 81       	ldd	r25, Y+2	; 0x02
    1920:	01 97       	sbiw	r24, 0x01	; 1
    1922:	f1 f7       	brne	.-4      	; 0x1920 <LCD_sendCommand+0x60a>
    1924:	9a 83       	std	Y+2, r25	; 0x02
    1926:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1928:	c9 5b       	subi	r28, 0xB9	; 185
    192a:	df 4f       	sbci	r29, 0xFF	; 255
    192c:	0f b6       	in	r0, 0x3f	; 63
    192e:	f8 94       	cli
    1930:	de bf       	out	0x3e, r29	; 62
    1932:	0f be       	out	0x3f, r0	; 63
    1934:	cd bf       	out	0x3d, r28	; 61
    1936:	cf 91       	pop	r28
    1938:	df 91       	pop	r29
    193a:	1f 91       	pop	r17
    193c:	0f 91       	pop	r16
    193e:	08 95       	ret

00001940 <LCD_displayCharacter>:
void LCD_displayCharacter(uint8 character)
{
    1940:	0f 93       	push	r16
    1942:	1f 93       	push	r17
    1944:	df 93       	push	r29
    1946:	cf 93       	push	r28
    1948:	cd b7       	in	r28, 0x3d	; 61
    194a:	de b7       	in	r29, 0x3e	; 62
    194c:	c7 54       	subi	r28, 0x47	; 71
    194e:	d0 40       	sbci	r29, 0x00	; 0
    1950:	0f b6       	in	r0, 0x3f	; 63
    1952:	f8 94       	cli
    1954:	de bf       	out	0x3e, r29	; 62
    1956:	0f be       	out	0x3f, r0	; 63
    1958:	cd bf       	out	0x3d, r28	; 61
    195a:	fe 01       	movw	r30, r28
    195c:	e9 5b       	subi	r30, 0xB9	; 185
    195e:	ff 4f       	sbci	r31, 0xFF	; 255
    1960:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /*RS=1 for sending Data*/
    1962:	80 e0       	ldi	r24, 0x00	; 0
    1964:	61 e0       	ldi	r22, 0x01	; 1
    1966:	41 e0       	ldi	r20, 0x01	; 1
    1968:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
    196c:	fe 01       	movw	r30, r28
    196e:	ed 5b       	subi	r30, 0xBD	; 189
    1970:	ff 4f       	sbci	r31, 0xFF	; 255
    1972:	80 e0       	ldi	r24, 0x00	; 0
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	a0 e8       	ldi	r26, 0x80	; 128
    1978:	bf e3       	ldi	r27, 0x3F	; 63
    197a:	80 83       	st	Z, r24
    197c:	91 83       	std	Z+1, r25	; 0x01
    197e:	a2 83       	std	Z+2, r26	; 0x02
    1980:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1982:	8e 01       	movw	r16, r28
    1984:	01 5c       	subi	r16, 0xC1	; 193
    1986:	1f 4f       	sbci	r17, 0xFF	; 255
    1988:	fe 01       	movw	r30, r28
    198a:	ed 5b       	subi	r30, 0xBD	; 189
    198c:	ff 4f       	sbci	r31, 0xFF	; 255
    198e:	60 81       	ld	r22, Z
    1990:	71 81       	ldd	r23, Z+1	; 0x01
    1992:	82 81       	ldd	r24, Z+2	; 0x02
    1994:	93 81       	ldd	r25, Z+3	; 0x03
    1996:	20 e0       	ldi	r18, 0x00	; 0
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	4a e7       	ldi	r20, 0x7A	; 122
    199c:	55 e4       	ldi	r21, 0x45	; 69
    199e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19a2:	dc 01       	movw	r26, r24
    19a4:	cb 01       	movw	r24, r22
    19a6:	f8 01       	movw	r30, r16
    19a8:	80 83       	st	Z, r24
    19aa:	91 83       	std	Z+1, r25	; 0x01
    19ac:	a2 83       	std	Z+2, r26	; 0x02
    19ae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19b0:	fe 01       	movw	r30, r28
    19b2:	ff 96       	adiw	r30, 0x3f	; 63
    19b4:	60 81       	ld	r22, Z
    19b6:	71 81       	ldd	r23, Z+1	; 0x01
    19b8:	82 81       	ldd	r24, Z+2	; 0x02
    19ba:	93 81       	ldd	r25, Z+3	; 0x03
    19bc:	20 e0       	ldi	r18, 0x00	; 0
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	40 e8       	ldi	r20, 0x80	; 128
    19c2:	5f e3       	ldi	r21, 0x3F	; 63
    19c4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    19c8:	88 23       	and	r24, r24
    19ca:	2c f4       	brge	.+10     	; 0x19d6 <LCD_displayCharacter+0x96>
		__ticks = 1;
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	9e af       	std	Y+62, r25	; 0x3e
    19d2:	8d af       	std	Y+61, r24	; 0x3d
    19d4:	46 c0       	rjmp	.+140    	; 0x1a62 <LCD_displayCharacter+0x122>
	else if (__tmp > 65535)
    19d6:	fe 01       	movw	r30, r28
    19d8:	ff 96       	adiw	r30, 0x3f	; 63
    19da:	60 81       	ld	r22, Z
    19dc:	71 81       	ldd	r23, Z+1	; 0x01
    19de:	82 81       	ldd	r24, Z+2	; 0x02
    19e0:	93 81       	ldd	r25, Z+3	; 0x03
    19e2:	20 e0       	ldi	r18, 0x00	; 0
    19e4:	3f ef       	ldi	r19, 0xFF	; 255
    19e6:	4f e7       	ldi	r20, 0x7F	; 127
    19e8:	57 e4       	ldi	r21, 0x47	; 71
    19ea:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    19ee:	18 16       	cp	r1, r24
    19f0:	64 f5       	brge	.+88     	; 0x1a4a <LCD_displayCharacter+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19f2:	fe 01       	movw	r30, r28
    19f4:	ed 5b       	subi	r30, 0xBD	; 189
    19f6:	ff 4f       	sbci	r31, 0xFF	; 255
    19f8:	60 81       	ld	r22, Z
    19fa:	71 81       	ldd	r23, Z+1	; 0x01
    19fc:	82 81       	ldd	r24, Z+2	; 0x02
    19fe:	93 81       	ldd	r25, Z+3	; 0x03
    1a00:	20 e0       	ldi	r18, 0x00	; 0
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	40 e2       	ldi	r20, 0x20	; 32
    1a06:	51 e4       	ldi	r21, 0x41	; 65
    1a08:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a0c:	dc 01       	movw	r26, r24
    1a0e:	cb 01       	movw	r24, r22
    1a10:	bc 01       	movw	r22, r24
    1a12:	cd 01       	movw	r24, r26
    1a14:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a18:	dc 01       	movw	r26, r24
    1a1a:	cb 01       	movw	r24, r22
    1a1c:	9e af       	std	Y+62, r25	; 0x3e
    1a1e:	8d af       	std	Y+61, r24	; 0x3d
    1a20:	0f c0       	rjmp	.+30     	; 0x1a40 <LCD_displayCharacter+0x100>
    1a22:	80 e9       	ldi	r24, 0x90	; 144
    1a24:	91 e0       	ldi	r25, 0x01	; 1
    1a26:	9c af       	std	Y+60, r25	; 0x3c
    1a28:	8b af       	std	Y+59, r24	; 0x3b
    1a2a:	8b ad       	ldd	r24, Y+59	; 0x3b
    1a2c:	9c ad       	ldd	r25, Y+60	; 0x3c
    1a2e:	01 97       	sbiw	r24, 0x01	; 1
    1a30:	f1 f7       	brne	.-4      	; 0x1a2e <LCD_displayCharacter+0xee>
    1a32:	9c af       	std	Y+60, r25	; 0x3c
    1a34:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a36:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a38:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a3a:	01 97       	sbiw	r24, 0x01	; 1
    1a3c:	9e af       	std	Y+62, r25	; 0x3e
    1a3e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a40:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a42:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a44:	00 97       	sbiw	r24, 0x00	; 0
    1a46:	69 f7       	brne	.-38     	; 0x1a22 <LCD_displayCharacter+0xe2>
    1a48:	16 c0       	rjmp	.+44     	; 0x1a76 <LCD_displayCharacter+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a4a:	fe 01       	movw	r30, r28
    1a4c:	ff 96       	adiw	r30, 0x3f	; 63
    1a4e:	60 81       	ld	r22, Z
    1a50:	71 81       	ldd	r23, Z+1	; 0x01
    1a52:	82 81       	ldd	r24, Z+2	; 0x02
    1a54:	93 81       	ldd	r25, Z+3	; 0x03
    1a56:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a5a:	dc 01       	movw	r26, r24
    1a5c:	cb 01       	movw	r24, r22
    1a5e:	9e af       	std	Y+62, r25	; 0x3e
    1a60:	8d af       	std	Y+61, r24	; 0x3d
    1a62:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a64:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a66:	9a af       	std	Y+58, r25	; 0x3a
    1a68:	89 af       	std	Y+57, r24	; 0x39
    1a6a:	89 ad       	ldd	r24, Y+57	; 0x39
    1a6c:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a6e:	01 97       	sbiw	r24, 0x01	; 1
    1a70:	f1 f7       	brne	.-4      	; 0x1a6e <LCD_displayCharacter+0x12e>
    1a72:	9a af       	std	Y+58, r25	; 0x3a
    1a74:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	GPIO_writePin(LCD_EN_PORT_ID,LCD_EN_PIN_ID,LOGIC_HIGH);/*E=1 for dealing with LCD*/
    1a76:	80 e0       	ldi	r24, 0x00	; 0
    1a78:	62 e0       	ldi	r22, 0x02	; 2
    1a7a:	41 e0       	ldi	r20, 0x01	; 1
    1a7c:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
    1a80:	80 e0       	ldi	r24, 0x00	; 0
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	a0 e8       	ldi	r26, 0x80	; 128
    1a86:	bf e3       	ldi	r27, 0x3F	; 63
    1a88:	8d ab       	std	Y+53, r24	; 0x35
    1a8a:	9e ab       	std	Y+54, r25	; 0x36
    1a8c:	af ab       	std	Y+55, r26	; 0x37
    1a8e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a90:	6d a9       	ldd	r22, Y+53	; 0x35
    1a92:	7e a9       	ldd	r23, Y+54	; 0x36
    1a94:	8f a9       	ldd	r24, Y+55	; 0x37
    1a96:	98 ad       	ldd	r25, Y+56	; 0x38
    1a98:	20 e0       	ldi	r18, 0x00	; 0
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	4a e7       	ldi	r20, 0x7A	; 122
    1a9e:	55 e4       	ldi	r21, 0x45	; 69
    1aa0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1aa4:	dc 01       	movw	r26, r24
    1aa6:	cb 01       	movw	r24, r22
    1aa8:	89 ab       	std	Y+49, r24	; 0x31
    1aaa:	9a ab       	std	Y+50, r25	; 0x32
    1aac:	ab ab       	std	Y+51, r26	; 0x33
    1aae:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ab0:	69 a9       	ldd	r22, Y+49	; 0x31
    1ab2:	7a a9       	ldd	r23, Y+50	; 0x32
    1ab4:	8b a9       	ldd	r24, Y+51	; 0x33
    1ab6:	9c a9       	ldd	r25, Y+52	; 0x34
    1ab8:	20 e0       	ldi	r18, 0x00	; 0
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	40 e8       	ldi	r20, 0x80	; 128
    1abe:	5f e3       	ldi	r21, 0x3F	; 63
    1ac0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ac4:	88 23       	and	r24, r24
    1ac6:	2c f4       	brge	.+10     	; 0x1ad2 <LCD_displayCharacter+0x192>
		__ticks = 1;
    1ac8:	81 e0       	ldi	r24, 0x01	; 1
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	98 ab       	std	Y+48, r25	; 0x30
    1ace:	8f a7       	std	Y+47, r24	; 0x2f
    1ad0:	3f c0       	rjmp	.+126    	; 0x1b50 <LCD_displayCharacter+0x210>
	else if (__tmp > 65535)
    1ad2:	69 a9       	ldd	r22, Y+49	; 0x31
    1ad4:	7a a9       	ldd	r23, Y+50	; 0x32
    1ad6:	8b a9       	ldd	r24, Y+51	; 0x33
    1ad8:	9c a9       	ldd	r25, Y+52	; 0x34
    1ada:	20 e0       	ldi	r18, 0x00	; 0
    1adc:	3f ef       	ldi	r19, 0xFF	; 255
    1ade:	4f e7       	ldi	r20, 0x7F	; 127
    1ae0:	57 e4       	ldi	r21, 0x47	; 71
    1ae2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ae6:	18 16       	cp	r1, r24
    1ae8:	4c f5       	brge	.+82     	; 0x1b3c <LCD_displayCharacter+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aea:	6d a9       	ldd	r22, Y+53	; 0x35
    1aec:	7e a9       	ldd	r23, Y+54	; 0x36
    1aee:	8f a9       	ldd	r24, Y+55	; 0x37
    1af0:	98 ad       	ldd	r25, Y+56	; 0x38
    1af2:	20 e0       	ldi	r18, 0x00	; 0
    1af4:	30 e0       	ldi	r19, 0x00	; 0
    1af6:	40 e2       	ldi	r20, 0x20	; 32
    1af8:	51 e4       	ldi	r21, 0x41	; 65
    1afa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1afe:	dc 01       	movw	r26, r24
    1b00:	cb 01       	movw	r24, r22
    1b02:	bc 01       	movw	r22, r24
    1b04:	cd 01       	movw	r24, r26
    1b06:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b0a:	dc 01       	movw	r26, r24
    1b0c:	cb 01       	movw	r24, r22
    1b0e:	98 ab       	std	Y+48, r25	; 0x30
    1b10:	8f a7       	std	Y+47, r24	; 0x2f
    1b12:	0f c0       	rjmp	.+30     	; 0x1b32 <LCD_displayCharacter+0x1f2>
    1b14:	80 e9       	ldi	r24, 0x90	; 144
    1b16:	91 e0       	ldi	r25, 0x01	; 1
    1b18:	9e a7       	std	Y+46, r25	; 0x2e
    1b1a:	8d a7       	std	Y+45, r24	; 0x2d
    1b1c:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b1e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b20:	01 97       	sbiw	r24, 0x01	; 1
    1b22:	f1 f7       	brne	.-4      	; 0x1b20 <LCD_displayCharacter+0x1e0>
    1b24:	9e a7       	std	Y+46, r25	; 0x2e
    1b26:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b28:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b2a:	98 a9       	ldd	r25, Y+48	; 0x30
    1b2c:	01 97       	sbiw	r24, 0x01	; 1
    1b2e:	98 ab       	std	Y+48, r25	; 0x30
    1b30:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b32:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b34:	98 a9       	ldd	r25, Y+48	; 0x30
    1b36:	00 97       	sbiw	r24, 0x00	; 0
    1b38:	69 f7       	brne	.-38     	; 0x1b14 <LCD_displayCharacter+0x1d4>
    1b3a:	14 c0       	rjmp	.+40     	; 0x1b64 <LCD_displayCharacter+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b3c:	69 a9       	ldd	r22, Y+49	; 0x31
    1b3e:	7a a9       	ldd	r23, Y+50	; 0x32
    1b40:	8b a9       	ldd	r24, Y+51	; 0x33
    1b42:	9c a9       	ldd	r25, Y+52	; 0x34
    1b44:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b48:	dc 01       	movw	r26, r24
    1b4a:	cb 01       	movw	r24, r22
    1b4c:	98 ab       	std	Y+48, r25	; 0x30
    1b4e:	8f a7       	std	Y+47, r24	; 0x2f
    1b50:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b52:	98 a9       	ldd	r25, Y+48	; 0x30
    1b54:	9c a7       	std	Y+44, r25	; 0x2c
    1b56:	8b a7       	std	Y+43, r24	; 0x2b
    1b58:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b5a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b5c:	01 97       	sbiw	r24, 0x01	; 1
    1b5e:	f1 f7       	brne	.-4      	; 0x1b5c <LCD_displayCharacter+0x21c>
    1b60:	9c a7       	std	Y+44, r25	; 0x2c
    1b62:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
#if(LCD_DATA_BITS_MODE == 4)
	/* since we are dealing with 4 bit mode we have to send the command twice so we send first
	 the LSB which are form 7 to 4 after this immediatly you have to disable the LCD to allow
	 the data sent to pass by the buffer then we send the MSB  */
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(character,4));
    1b64:	fe 01       	movw	r30, r28
    1b66:	e9 5b       	subi	r30, 0xB9	; 185
    1b68:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6a:	80 81       	ld	r24, Z
    1b6c:	88 2f       	mov	r24, r24
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	80 71       	andi	r24, 0x10	; 16
    1b72:	90 70       	andi	r25, 0x00	; 0
    1b74:	95 95       	asr	r25
    1b76:	87 95       	ror	r24
    1b78:	95 95       	asr	r25
    1b7a:	87 95       	ror	r24
    1b7c:	95 95       	asr	r25
    1b7e:	87 95       	ror	r24
    1b80:	95 95       	asr	r25
    1b82:	87 95       	ror	r24
    1b84:	98 2f       	mov	r25, r24
    1b86:	80 e0       	ldi	r24, 0x00	; 0
    1b88:	63 e0       	ldi	r22, 0x03	; 3
    1b8a:	49 2f       	mov	r20, r25
    1b8c:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(character,5));
    1b90:	fe 01       	movw	r30, r28
    1b92:	e9 5b       	subi	r30, 0xB9	; 185
    1b94:	ff 4f       	sbci	r31, 0xFF	; 255
    1b96:	80 81       	ld	r24, Z
    1b98:	88 2f       	mov	r24, r24
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	80 72       	andi	r24, 0x20	; 32
    1b9e:	90 70       	andi	r25, 0x00	; 0
    1ba0:	95 95       	asr	r25
    1ba2:	87 95       	ror	r24
    1ba4:	95 95       	asr	r25
    1ba6:	87 95       	ror	r24
    1ba8:	95 95       	asr	r25
    1baa:	87 95       	ror	r24
    1bac:	95 95       	asr	r25
    1bae:	87 95       	ror	r24
    1bb0:	95 95       	asr	r25
    1bb2:	87 95       	ror	r24
    1bb4:	98 2f       	mov	r25, r24
    1bb6:	80 e0       	ldi	r24, 0x00	; 0
    1bb8:	64 e0       	ldi	r22, 0x04	; 4
    1bba:	49 2f       	mov	r20, r25
    1bbc:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(character,6));
    1bc0:	fe 01       	movw	r30, r28
    1bc2:	e9 5b       	subi	r30, 0xB9	; 185
    1bc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc6:	80 81       	ld	r24, Z
    1bc8:	88 2f       	mov	r24, r24
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	80 74       	andi	r24, 0x40	; 64
    1bce:	90 70       	andi	r25, 0x00	; 0
    1bd0:	08 2e       	mov	r0, r24
    1bd2:	89 2f       	mov	r24, r25
    1bd4:	00 0c       	add	r0, r0
    1bd6:	88 1f       	adc	r24, r24
    1bd8:	99 0b       	sbc	r25, r25
    1bda:	00 0c       	add	r0, r0
    1bdc:	88 1f       	adc	r24, r24
    1bde:	99 1f       	adc	r25, r25
    1be0:	98 2f       	mov	r25, r24
    1be2:	80 e0       	ldi	r24, 0x00	; 0
    1be4:	65 e0       	ldi	r22, 0x05	; 5
    1be6:	49 2f       	mov	r20, r25
    1be8:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(character,7));
    1bec:	fe 01       	movw	r30, r28
    1bee:	e9 5b       	subi	r30, 0xB9	; 185
    1bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf2:	80 81       	ld	r24, Z
    1bf4:	98 2f       	mov	r25, r24
    1bf6:	99 1f       	adc	r25, r25
    1bf8:	99 27       	eor	r25, r25
    1bfa:	99 1f       	adc	r25, r25
    1bfc:	80 e0       	ldi	r24, 0x00	; 0
    1bfe:	66 e0       	ldi	r22, 0x06	; 6
    1c00:	49 2f       	mov	r20, r25
    1c02:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>

	GPIO_writePin(LCD_EN_PORT_ID,LCD_EN_PIN_ID,LOGIC_LOW);
    1c06:	80 e0       	ldi	r24, 0x00	; 0
    1c08:	62 e0       	ldi	r22, 0x02	; 2
    1c0a:	40 e0       	ldi	r20, 0x00	; 0
    1c0c:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
    1c10:	80 e0       	ldi	r24, 0x00	; 0
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	a0 e8       	ldi	r26, 0x80	; 128
    1c16:	bf e3       	ldi	r27, 0x3F	; 63
    1c18:	8f a3       	std	Y+39, r24	; 0x27
    1c1a:	98 a7       	std	Y+40, r25	; 0x28
    1c1c:	a9 a7       	std	Y+41, r26	; 0x29
    1c1e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c20:	6f a1       	ldd	r22, Y+39	; 0x27
    1c22:	78 a5       	ldd	r23, Y+40	; 0x28
    1c24:	89 a5       	ldd	r24, Y+41	; 0x29
    1c26:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c28:	20 e0       	ldi	r18, 0x00	; 0
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	4a e7       	ldi	r20, 0x7A	; 122
    1c2e:	55 e4       	ldi	r21, 0x45	; 69
    1c30:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c34:	dc 01       	movw	r26, r24
    1c36:	cb 01       	movw	r24, r22
    1c38:	8b a3       	std	Y+35, r24	; 0x23
    1c3a:	9c a3       	std	Y+36, r25	; 0x24
    1c3c:	ad a3       	std	Y+37, r26	; 0x25
    1c3e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c40:	6b a1       	ldd	r22, Y+35	; 0x23
    1c42:	7c a1       	ldd	r23, Y+36	; 0x24
    1c44:	8d a1       	ldd	r24, Y+37	; 0x25
    1c46:	9e a1       	ldd	r25, Y+38	; 0x26
    1c48:	20 e0       	ldi	r18, 0x00	; 0
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	40 e8       	ldi	r20, 0x80	; 128
    1c4e:	5f e3       	ldi	r21, 0x3F	; 63
    1c50:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c54:	88 23       	and	r24, r24
    1c56:	2c f4       	brge	.+10     	; 0x1c62 <LCD_displayCharacter+0x322>
		__ticks = 1;
    1c58:	81 e0       	ldi	r24, 0x01	; 1
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	9a a3       	std	Y+34, r25	; 0x22
    1c5e:	89 a3       	std	Y+33, r24	; 0x21
    1c60:	3f c0       	rjmp	.+126    	; 0x1ce0 <LCD_displayCharacter+0x3a0>
	else if (__tmp > 65535)
    1c62:	6b a1       	ldd	r22, Y+35	; 0x23
    1c64:	7c a1       	ldd	r23, Y+36	; 0x24
    1c66:	8d a1       	ldd	r24, Y+37	; 0x25
    1c68:	9e a1       	ldd	r25, Y+38	; 0x26
    1c6a:	20 e0       	ldi	r18, 0x00	; 0
    1c6c:	3f ef       	ldi	r19, 0xFF	; 255
    1c6e:	4f e7       	ldi	r20, 0x7F	; 127
    1c70:	57 e4       	ldi	r21, 0x47	; 71
    1c72:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c76:	18 16       	cp	r1, r24
    1c78:	4c f5       	brge	.+82     	; 0x1ccc <LCD_displayCharacter+0x38c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c7a:	6f a1       	ldd	r22, Y+39	; 0x27
    1c7c:	78 a5       	ldd	r23, Y+40	; 0x28
    1c7e:	89 a5       	ldd	r24, Y+41	; 0x29
    1c80:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c82:	20 e0       	ldi	r18, 0x00	; 0
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	40 e2       	ldi	r20, 0x20	; 32
    1c88:	51 e4       	ldi	r21, 0x41	; 65
    1c8a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c8e:	dc 01       	movw	r26, r24
    1c90:	cb 01       	movw	r24, r22
    1c92:	bc 01       	movw	r22, r24
    1c94:	cd 01       	movw	r24, r26
    1c96:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c9a:	dc 01       	movw	r26, r24
    1c9c:	cb 01       	movw	r24, r22
    1c9e:	9a a3       	std	Y+34, r25	; 0x22
    1ca0:	89 a3       	std	Y+33, r24	; 0x21
    1ca2:	0f c0       	rjmp	.+30     	; 0x1cc2 <LCD_displayCharacter+0x382>
    1ca4:	80 e9       	ldi	r24, 0x90	; 144
    1ca6:	91 e0       	ldi	r25, 0x01	; 1
    1ca8:	98 a3       	std	Y+32, r25	; 0x20
    1caa:	8f 8f       	std	Y+31, r24	; 0x1f
    1cac:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1cae:	98 a1       	ldd	r25, Y+32	; 0x20
    1cb0:	01 97       	sbiw	r24, 0x01	; 1
    1cb2:	f1 f7       	brne	.-4      	; 0x1cb0 <LCD_displayCharacter+0x370>
    1cb4:	98 a3       	std	Y+32, r25	; 0x20
    1cb6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cb8:	89 a1       	ldd	r24, Y+33	; 0x21
    1cba:	9a a1       	ldd	r25, Y+34	; 0x22
    1cbc:	01 97       	sbiw	r24, 0x01	; 1
    1cbe:	9a a3       	std	Y+34, r25	; 0x22
    1cc0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cc2:	89 a1       	ldd	r24, Y+33	; 0x21
    1cc4:	9a a1       	ldd	r25, Y+34	; 0x22
    1cc6:	00 97       	sbiw	r24, 0x00	; 0
    1cc8:	69 f7       	brne	.-38     	; 0x1ca4 <LCD_displayCharacter+0x364>
    1cca:	14 c0       	rjmp	.+40     	; 0x1cf4 <LCD_displayCharacter+0x3b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ccc:	6b a1       	ldd	r22, Y+35	; 0x23
    1cce:	7c a1       	ldd	r23, Y+36	; 0x24
    1cd0:	8d a1       	ldd	r24, Y+37	; 0x25
    1cd2:	9e a1       	ldd	r25, Y+38	; 0x26
    1cd4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cd8:	dc 01       	movw	r26, r24
    1cda:	cb 01       	movw	r24, r22
    1cdc:	9a a3       	std	Y+34, r25	; 0x22
    1cde:	89 a3       	std	Y+33, r24	; 0x21
    1ce0:	89 a1       	ldd	r24, Y+33	; 0x21
    1ce2:	9a a1       	ldd	r25, Y+34	; 0x22
    1ce4:	9e 8f       	std	Y+30, r25	; 0x1e
    1ce6:	8d 8f       	std	Y+29, r24	; 0x1d
    1ce8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cea:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1cec:	01 97       	sbiw	r24, 0x01	; 1
    1cee:	f1 f7       	brne	.-4      	; 0x1cec <LCD_displayCharacter+0x3ac>
    1cf0:	9e 8f       	std	Y+30, r25	; 0x1e
    1cf2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	GPIO_writePin(LCD_EN_PORT_ID,LCD_EN_PIN_ID,LOGIC_HIGH);/*E=0 for disabling with LCD*/
    1cf4:	80 e0       	ldi	r24, 0x00	; 0
    1cf6:	62 e0       	ldi	r22, 0x02	; 2
    1cf8:	41 e0       	ldi	r20, 0x01	; 1
    1cfa:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
    1cfe:	80 e0       	ldi	r24, 0x00	; 0
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	a0 e8       	ldi	r26, 0x80	; 128
    1d04:	bf e3       	ldi	r27, 0x3F	; 63
    1d06:	89 8f       	std	Y+25, r24	; 0x19
    1d08:	9a 8f       	std	Y+26, r25	; 0x1a
    1d0a:	ab 8f       	std	Y+27, r26	; 0x1b
    1d0c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d0e:	69 8d       	ldd	r22, Y+25	; 0x19
    1d10:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d12:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d14:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d16:	20 e0       	ldi	r18, 0x00	; 0
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	4a e7       	ldi	r20, 0x7A	; 122
    1d1c:	55 e4       	ldi	r21, 0x45	; 69
    1d1e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d22:	dc 01       	movw	r26, r24
    1d24:	cb 01       	movw	r24, r22
    1d26:	8d 8b       	std	Y+21, r24	; 0x15
    1d28:	9e 8b       	std	Y+22, r25	; 0x16
    1d2a:	af 8b       	std	Y+23, r26	; 0x17
    1d2c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d2e:	6d 89       	ldd	r22, Y+21	; 0x15
    1d30:	7e 89       	ldd	r23, Y+22	; 0x16
    1d32:	8f 89       	ldd	r24, Y+23	; 0x17
    1d34:	98 8d       	ldd	r25, Y+24	; 0x18
    1d36:	20 e0       	ldi	r18, 0x00	; 0
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	40 e8       	ldi	r20, 0x80	; 128
    1d3c:	5f e3       	ldi	r21, 0x3F	; 63
    1d3e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d42:	88 23       	and	r24, r24
    1d44:	2c f4       	brge	.+10     	; 0x1d50 <LCD_displayCharacter+0x410>
		__ticks = 1;
    1d46:	81 e0       	ldi	r24, 0x01	; 1
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	9c 8b       	std	Y+20, r25	; 0x14
    1d4c:	8b 8b       	std	Y+19, r24	; 0x13
    1d4e:	3f c0       	rjmp	.+126    	; 0x1dce <LCD_displayCharacter+0x48e>
	else if (__tmp > 65535)
    1d50:	6d 89       	ldd	r22, Y+21	; 0x15
    1d52:	7e 89       	ldd	r23, Y+22	; 0x16
    1d54:	8f 89       	ldd	r24, Y+23	; 0x17
    1d56:	98 8d       	ldd	r25, Y+24	; 0x18
    1d58:	20 e0       	ldi	r18, 0x00	; 0
    1d5a:	3f ef       	ldi	r19, 0xFF	; 255
    1d5c:	4f e7       	ldi	r20, 0x7F	; 127
    1d5e:	57 e4       	ldi	r21, 0x47	; 71
    1d60:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d64:	18 16       	cp	r1, r24
    1d66:	4c f5       	brge	.+82     	; 0x1dba <LCD_displayCharacter+0x47a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d68:	69 8d       	ldd	r22, Y+25	; 0x19
    1d6a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d6c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d6e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d70:	20 e0       	ldi	r18, 0x00	; 0
    1d72:	30 e0       	ldi	r19, 0x00	; 0
    1d74:	40 e2       	ldi	r20, 0x20	; 32
    1d76:	51 e4       	ldi	r21, 0x41	; 65
    1d78:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d7c:	dc 01       	movw	r26, r24
    1d7e:	cb 01       	movw	r24, r22
    1d80:	bc 01       	movw	r22, r24
    1d82:	cd 01       	movw	r24, r26
    1d84:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d88:	dc 01       	movw	r26, r24
    1d8a:	cb 01       	movw	r24, r22
    1d8c:	9c 8b       	std	Y+20, r25	; 0x14
    1d8e:	8b 8b       	std	Y+19, r24	; 0x13
    1d90:	0f c0       	rjmp	.+30     	; 0x1db0 <LCD_displayCharacter+0x470>
    1d92:	80 e9       	ldi	r24, 0x90	; 144
    1d94:	91 e0       	ldi	r25, 0x01	; 1
    1d96:	9a 8b       	std	Y+18, r25	; 0x12
    1d98:	89 8b       	std	Y+17, r24	; 0x11
    1d9a:	89 89       	ldd	r24, Y+17	; 0x11
    1d9c:	9a 89       	ldd	r25, Y+18	; 0x12
    1d9e:	01 97       	sbiw	r24, 0x01	; 1
    1da0:	f1 f7       	brne	.-4      	; 0x1d9e <LCD_displayCharacter+0x45e>
    1da2:	9a 8b       	std	Y+18, r25	; 0x12
    1da4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1da6:	8b 89       	ldd	r24, Y+19	; 0x13
    1da8:	9c 89       	ldd	r25, Y+20	; 0x14
    1daa:	01 97       	sbiw	r24, 0x01	; 1
    1dac:	9c 8b       	std	Y+20, r25	; 0x14
    1dae:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1db0:	8b 89       	ldd	r24, Y+19	; 0x13
    1db2:	9c 89       	ldd	r25, Y+20	; 0x14
    1db4:	00 97       	sbiw	r24, 0x00	; 0
    1db6:	69 f7       	brne	.-38     	; 0x1d92 <LCD_displayCharacter+0x452>
    1db8:	14 c0       	rjmp	.+40     	; 0x1de2 <LCD_displayCharacter+0x4a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dba:	6d 89       	ldd	r22, Y+21	; 0x15
    1dbc:	7e 89       	ldd	r23, Y+22	; 0x16
    1dbe:	8f 89       	ldd	r24, Y+23	; 0x17
    1dc0:	98 8d       	ldd	r25, Y+24	; 0x18
    1dc2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dc6:	dc 01       	movw	r26, r24
    1dc8:	cb 01       	movw	r24, r22
    1dca:	9c 8b       	std	Y+20, r25	; 0x14
    1dcc:	8b 8b       	std	Y+19, r24	; 0x13
    1dce:	8b 89       	ldd	r24, Y+19	; 0x13
    1dd0:	9c 89       	ldd	r25, Y+20	; 0x14
    1dd2:	98 8b       	std	Y+16, r25	; 0x10
    1dd4:	8f 87       	std	Y+15, r24	; 0x0f
    1dd6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dd8:	98 89       	ldd	r25, Y+16	; 0x10
    1dda:	01 97       	sbiw	r24, 0x01	; 1
    1ddc:	f1 f7       	brne	.-4      	; 0x1dda <LCD_displayCharacter+0x49a>
    1dde:	98 8b       	std	Y+16, r25	; 0x10
    1de0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(character,0));
    1de2:	fe 01       	movw	r30, r28
    1de4:	e9 5b       	subi	r30, 0xB9	; 185
    1de6:	ff 4f       	sbci	r31, 0xFF	; 255
    1de8:	80 81       	ld	r24, Z
    1dea:	98 2f       	mov	r25, r24
    1dec:	91 70       	andi	r25, 0x01	; 1
    1dee:	80 e0       	ldi	r24, 0x00	; 0
    1df0:	63 e0       	ldi	r22, 0x03	; 3
    1df2:	49 2f       	mov	r20, r25
    1df4:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(character,1));
    1df8:	fe 01       	movw	r30, r28
    1dfa:	e9 5b       	subi	r30, 0xB9	; 185
    1dfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfe:	80 81       	ld	r24, Z
    1e00:	88 2f       	mov	r24, r24
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	82 70       	andi	r24, 0x02	; 2
    1e06:	90 70       	andi	r25, 0x00	; 0
    1e08:	95 95       	asr	r25
    1e0a:	87 95       	ror	r24
    1e0c:	98 2f       	mov	r25, r24
    1e0e:	80 e0       	ldi	r24, 0x00	; 0
    1e10:	64 e0       	ldi	r22, 0x04	; 4
    1e12:	49 2f       	mov	r20, r25
    1e14:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(character,2));
    1e18:	fe 01       	movw	r30, r28
    1e1a:	e9 5b       	subi	r30, 0xB9	; 185
    1e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1e:	80 81       	ld	r24, Z
    1e20:	88 2f       	mov	r24, r24
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	84 70       	andi	r24, 0x04	; 4
    1e26:	90 70       	andi	r25, 0x00	; 0
    1e28:	95 95       	asr	r25
    1e2a:	87 95       	ror	r24
    1e2c:	95 95       	asr	r25
    1e2e:	87 95       	ror	r24
    1e30:	98 2f       	mov	r25, r24
    1e32:	80 e0       	ldi	r24, 0x00	; 0
    1e34:	65 e0       	ldi	r22, 0x05	; 5
    1e36:	49 2f       	mov	r20, r25
    1e38:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(character,3));
    1e3c:	fe 01       	movw	r30, r28
    1e3e:	e9 5b       	subi	r30, 0xB9	; 185
    1e40:	ff 4f       	sbci	r31, 0xFF	; 255
    1e42:	80 81       	ld	r24, Z
    1e44:	88 2f       	mov	r24, r24
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	88 70       	andi	r24, 0x08	; 8
    1e4a:	90 70       	andi	r25, 0x00	; 0
    1e4c:	95 95       	asr	r25
    1e4e:	87 95       	ror	r24
    1e50:	95 95       	asr	r25
    1e52:	87 95       	ror	r24
    1e54:	95 95       	asr	r25
    1e56:	87 95       	ror	r24
    1e58:	98 2f       	mov	r25, r24
    1e5a:	80 e0       	ldi	r24, 0x00	; 0
    1e5c:	66 e0       	ldi	r22, 0x06	; 6
    1e5e:	49 2f       	mov	r20, r25
    1e60:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,character);/*Sending Command*/
	_delay_ms(1);
#endif
	GPIO_writePin(LCD_EN_PORT_ID,LCD_EN_PIN_ID,LOGIC_LOW);/*E=0 for disabling the LCD*/
    1e64:	80 e0       	ldi	r24, 0x00	; 0
    1e66:	62 e0       	ldi	r22, 0x02	; 2
    1e68:	40 e0       	ldi	r20, 0x00	; 0
    1e6a:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
    1e6e:	80 e0       	ldi	r24, 0x00	; 0
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	a0 e8       	ldi	r26, 0x80	; 128
    1e74:	bf e3       	ldi	r27, 0x3F	; 63
    1e76:	8b 87       	std	Y+11, r24	; 0x0b
    1e78:	9c 87       	std	Y+12, r25	; 0x0c
    1e7a:	ad 87       	std	Y+13, r26	; 0x0d
    1e7c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e80:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e82:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e84:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e86:	20 e0       	ldi	r18, 0x00	; 0
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	4a e7       	ldi	r20, 0x7A	; 122
    1e8c:	55 e4       	ldi	r21, 0x45	; 69
    1e8e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e92:	dc 01       	movw	r26, r24
    1e94:	cb 01       	movw	r24, r22
    1e96:	8f 83       	std	Y+7, r24	; 0x07
    1e98:	98 87       	std	Y+8, r25	; 0x08
    1e9a:	a9 87       	std	Y+9, r26	; 0x09
    1e9c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e9e:	6f 81       	ldd	r22, Y+7	; 0x07
    1ea0:	78 85       	ldd	r23, Y+8	; 0x08
    1ea2:	89 85       	ldd	r24, Y+9	; 0x09
    1ea4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ea6:	20 e0       	ldi	r18, 0x00	; 0
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	40 e8       	ldi	r20, 0x80	; 128
    1eac:	5f e3       	ldi	r21, 0x3F	; 63
    1eae:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1eb2:	88 23       	and	r24, r24
    1eb4:	2c f4       	brge	.+10     	; 0x1ec0 <LCD_displayCharacter+0x580>
		__ticks = 1;
    1eb6:	81 e0       	ldi	r24, 0x01	; 1
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	9e 83       	std	Y+6, r25	; 0x06
    1ebc:	8d 83       	std	Y+5, r24	; 0x05
    1ebe:	3f c0       	rjmp	.+126    	; 0x1f3e <LCD_displayCharacter+0x5fe>
	else if (__tmp > 65535)
    1ec0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ec2:	78 85       	ldd	r23, Y+8	; 0x08
    1ec4:	89 85       	ldd	r24, Y+9	; 0x09
    1ec6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ec8:	20 e0       	ldi	r18, 0x00	; 0
    1eca:	3f ef       	ldi	r19, 0xFF	; 255
    1ecc:	4f e7       	ldi	r20, 0x7F	; 127
    1ece:	57 e4       	ldi	r21, 0x47	; 71
    1ed0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ed4:	18 16       	cp	r1, r24
    1ed6:	4c f5       	brge	.+82     	; 0x1f2a <LCD_displayCharacter+0x5ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ed8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eda:	7c 85       	ldd	r23, Y+12	; 0x0c
    1edc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ede:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ee0:	20 e0       	ldi	r18, 0x00	; 0
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	40 e2       	ldi	r20, 0x20	; 32
    1ee6:	51 e4       	ldi	r21, 0x41	; 65
    1ee8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1eec:	dc 01       	movw	r26, r24
    1eee:	cb 01       	movw	r24, r22
    1ef0:	bc 01       	movw	r22, r24
    1ef2:	cd 01       	movw	r24, r26
    1ef4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ef8:	dc 01       	movw	r26, r24
    1efa:	cb 01       	movw	r24, r22
    1efc:	9e 83       	std	Y+6, r25	; 0x06
    1efe:	8d 83       	std	Y+5, r24	; 0x05
    1f00:	0f c0       	rjmp	.+30     	; 0x1f20 <LCD_displayCharacter+0x5e0>
    1f02:	80 e9       	ldi	r24, 0x90	; 144
    1f04:	91 e0       	ldi	r25, 0x01	; 1
    1f06:	9c 83       	std	Y+4, r25	; 0x04
    1f08:	8b 83       	std	Y+3, r24	; 0x03
    1f0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f0e:	01 97       	sbiw	r24, 0x01	; 1
    1f10:	f1 f7       	brne	.-4      	; 0x1f0e <LCD_displayCharacter+0x5ce>
    1f12:	9c 83       	std	Y+4, r25	; 0x04
    1f14:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f16:	8d 81       	ldd	r24, Y+5	; 0x05
    1f18:	9e 81       	ldd	r25, Y+6	; 0x06
    1f1a:	01 97       	sbiw	r24, 0x01	; 1
    1f1c:	9e 83       	std	Y+6, r25	; 0x06
    1f1e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f20:	8d 81       	ldd	r24, Y+5	; 0x05
    1f22:	9e 81       	ldd	r25, Y+6	; 0x06
    1f24:	00 97       	sbiw	r24, 0x00	; 0
    1f26:	69 f7       	brne	.-38     	; 0x1f02 <LCD_displayCharacter+0x5c2>
    1f28:	14 c0       	rjmp	.+40     	; 0x1f52 <LCD_displayCharacter+0x612>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f2a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f2c:	78 85       	ldd	r23, Y+8	; 0x08
    1f2e:	89 85       	ldd	r24, Y+9	; 0x09
    1f30:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f32:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f36:	dc 01       	movw	r26, r24
    1f38:	cb 01       	movw	r24, r22
    1f3a:	9e 83       	std	Y+6, r25	; 0x06
    1f3c:	8d 83       	std	Y+5, r24	; 0x05
    1f3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f40:	9e 81       	ldd	r25, Y+6	; 0x06
    1f42:	9a 83       	std	Y+2, r25	; 0x02
    1f44:	89 83       	std	Y+1, r24	; 0x01
    1f46:	89 81       	ldd	r24, Y+1	; 0x01
    1f48:	9a 81       	ldd	r25, Y+2	; 0x02
    1f4a:	01 97       	sbiw	r24, 0x01	; 1
    1f4c:	f1 f7       	brne	.-4      	; 0x1f4a <LCD_displayCharacter+0x60a>
    1f4e:	9a 83       	std	Y+2, r25	; 0x02
    1f50:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1f52:	c9 5b       	subi	r28, 0xB9	; 185
    1f54:	df 4f       	sbci	r29, 0xFF	; 255
    1f56:	0f b6       	in	r0, 0x3f	; 63
    1f58:	f8 94       	cli
    1f5a:	de bf       	out	0x3e, r29	; 62
    1f5c:	0f be       	out	0x3f, r0	; 63
    1f5e:	cd bf       	out	0x3d, r28	; 61
    1f60:	cf 91       	pop	r28
    1f62:	df 91       	pop	r29
    1f64:	1f 91       	pop	r17
    1f66:	0f 91       	pop	r16
    1f68:	08 95       	ret

00001f6a <LCD_displayString>:
void LCD_displayString(uint8 *character)
{
    1f6a:	df 93       	push	r29
    1f6c:	cf 93       	push	r28
    1f6e:	00 d0       	rcall	.+0      	; 0x1f70 <LCD_displayString+0x6>
    1f70:	cd b7       	in	r28, 0x3d	; 61
    1f72:	de b7       	in	r29, 0x3e	; 62
    1f74:	9a 83       	std	Y+2, r25	; 0x02
    1f76:	89 83       	std	Y+1, r24	; 0x01
    1f78:	0a c0       	rjmp	.+20     	; 0x1f8e <LCD_displayString+0x24>
	while((*character) !='\0')
	{
		LCD_displayCharacter(*character);
    1f7a:	e9 81       	ldd	r30, Y+1	; 0x01
    1f7c:	fa 81       	ldd	r31, Y+2	; 0x02
    1f7e:	80 81       	ld	r24, Z
    1f80:	0e 94 a0 0c 	call	0x1940	; 0x1940 <LCD_displayCharacter>
		character++;
    1f84:	89 81       	ldd	r24, Y+1	; 0x01
    1f86:	9a 81       	ldd	r25, Y+2	; 0x02
    1f88:	01 96       	adiw	r24, 0x01	; 1
    1f8a:	9a 83       	std	Y+2, r25	; 0x02
    1f8c:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(LCD_EN_PORT_ID,LCD_EN_PIN_ID,LOGIC_LOW);/*E=0 for disabling the LCD*/
	_delay_ms(1);
}
void LCD_displayString(uint8 *character)
{
	while((*character) !='\0')
    1f8e:	e9 81       	ldd	r30, Y+1	; 0x01
    1f90:	fa 81       	ldd	r31, Y+2	; 0x02
    1f92:	80 81       	ld	r24, Z
    1f94:	88 23       	and	r24, r24
    1f96:	89 f7       	brne	.-30     	; 0x1f7a <LCD_displayString+0x10>
	{
		LCD_displayCharacter(*character);
		character++;
	}

}
    1f98:	0f 90       	pop	r0
    1f9a:	0f 90       	pop	r0
    1f9c:	cf 91       	pop	r28
    1f9e:	df 91       	pop	r29
    1fa0:	08 95       	ret

00001fa2 <LCD_clearScreen>:
void LCD_clearScreen(void)
{
    1fa2:	df 93       	push	r29
    1fa4:	cf 93       	push	r28
    1fa6:	cd b7       	in	r28, 0x3d	; 61
    1fa8:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    1faa:	81 e0       	ldi	r24, 0x01	; 1
    1fac:	0e 94 8b 09 	call	0x1316	; 0x1316 <LCD_sendCommand>
}
    1fb0:	cf 91       	pop	r28
    1fb2:	df 91       	pop	r29
    1fb4:	08 95       	ret

00001fb6 <LCD_moveCursor>:
void LCD_moveCursor(uint8 row,uint8 cloumn)
{
    1fb6:	df 93       	push	r29
    1fb8:	cf 93       	push	r28
    1fba:	00 d0       	rcall	.+0      	; 0x1fbc <LCD_moveCursor+0x6>
    1fbc:	00 d0       	rcall	.+0      	; 0x1fbe <LCD_moveCursor+0x8>
    1fbe:	0f 92       	push	r0
    1fc0:	cd b7       	in	r28, 0x3d	; 61
    1fc2:	de b7       	in	r29, 0x3e	; 62
    1fc4:	8a 83       	std	Y+2, r24	; 0x02
    1fc6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 LCD_memoryAddress;
	/*The logic of this is the number of the khana is the number of the column fadel bs eny adeef 3aleh rakm
	 elrow bs fbgm3 kol shwya qemet elrow 3ala elcolumn wab3tha*/
	switch(row)
    1fc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fca:	28 2f       	mov	r18, r24
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	3d 83       	std	Y+5, r19	; 0x05
    1fd0:	2c 83       	std	Y+4, r18	; 0x04
    1fd2:	8c 81       	ldd	r24, Y+4	; 0x04
    1fd4:	9d 81       	ldd	r25, Y+5	; 0x05
    1fd6:	81 30       	cpi	r24, 0x01	; 1
    1fd8:	91 05       	cpc	r25, r1
    1fda:	c1 f0       	breq	.+48     	; 0x200c <LCD_moveCursor+0x56>
    1fdc:	2c 81       	ldd	r18, Y+4	; 0x04
    1fde:	3d 81       	ldd	r19, Y+5	; 0x05
    1fe0:	22 30       	cpi	r18, 0x02	; 2
    1fe2:	31 05       	cpc	r19, r1
    1fe4:	2c f4       	brge	.+10     	; 0x1ff0 <LCD_moveCursor+0x3a>
    1fe6:	8c 81       	ldd	r24, Y+4	; 0x04
    1fe8:	9d 81       	ldd	r25, Y+5	; 0x05
    1fea:	00 97       	sbiw	r24, 0x00	; 0
    1fec:	61 f0       	breq	.+24     	; 0x2006 <LCD_moveCursor+0x50>
    1fee:	19 c0       	rjmp	.+50     	; 0x2022 <LCD_moveCursor+0x6c>
    1ff0:	2c 81       	ldd	r18, Y+4	; 0x04
    1ff2:	3d 81       	ldd	r19, Y+5	; 0x05
    1ff4:	22 30       	cpi	r18, 0x02	; 2
    1ff6:	31 05       	cpc	r19, r1
    1ff8:	69 f0       	breq	.+26     	; 0x2014 <LCD_moveCursor+0x5e>
    1ffa:	8c 81       	ldd	r24, Y+4	; 0x04
    1ffc:	9d 81       	ldd	r25, Y+5	; 0x05
    1ffe:	83 30       	cpi	r24, 0x03	; 3
    2000:	91 05       	cpc	r25, r1
    2002:	61 f0       	breq	.+24     	; 0x201c <LCD_moveCursor+0x66>
    2004:	0e c0       	rjmp	.+28     	; 0x2022 <LCD_moveCursor+0x6c>
	{
	case 0:
		LCD_memoryAddress=cloumn;
    2006:	8b 81       	ldd	r24, Y+3	; 0x03
    2008:	89 83       	std	Y+1, r24	; 0x01
    200a:	0b c0       	rjmp	.+22     	; 0x2022 <LCD_moveCursor+0x6c>
		break;
	case 1:
		LCD_memoryAddress=cloumn+0x40;
    200c:	8b 81       	ldd	r24, Y+3	; 0x03
    200e:	80 5c       	subi	r24, 0xC0	; 192
    2010:	89 83       	std	Y+1, r24	; 0x01
    2012:	07 c0       	rjmp	.+14     	; 0x2022 <LCD_moveCursor+0x6c>
		break;
	case 2:
		LCD_memoryAddress=cloumn+0x10;
    2014:	8b 81       	ldd	r24, Y+3	; 0x03
    2016:	80 5f       	subi	r24, 0xF0	; 240
    2018:	89 83       	std	Y+1, r24	; 0x01
    201a:	03 c0       	rjmp	.+6      	; 0x2022 <LCD_moveCursor+0x6c>
		break;
	case 3:
		LCD_memoryAddress=cloumn+0x50;
    201c:	8b 81       	ldd	r24, Y+3	; 0x03
    201e:	80 5b       	subi	r24, 0xB0	; 176
    2020:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	LCD_sendCommand(LCD_memoryAddress|LCD_SET_CURSOR_LOCATION);
    2022:	89 81       	ldd	r24, Y+1	; 0x01
    2024:	80 68       	ori	r24, 0x80	; 128
    2026:	0e 94 8b 09 	call	0x1316	; 0x1316 <LCD_sendCommand>
}
    202a:	0f 90       	pop	r0
    202c:	0f 90       	pop	r0
    202e:	0f 90       	pop	r0
    2030:	0f 90       	pop	r0
    2032:	0f 90       	pop	r0
    2034:	cf 91       	pop	r28
    2036:	df 91       	pop	r29
    2038:	08 95       	ret

0000203a <LCD_integerToString>:
void LCD_integerToString(int data)
{
    203a:	df 93       	push	r29
    203c:	cf 93       	push	r28
    203e:	cd b7       	in	r28, 0x3d	; 61
    2040:	de b7       	in	r29, 0x3e	; 62
    2042:	62 97       	sbiw	r28, 0x12	; 18
    2044:	0f b6       	in	r0, 0x3f	; 63
    2046:	f8 94       	cli
    2048:	de bf       	out	0x3e, r29	; 62
    204a:	0f be       	out	0x3f, r0	; 63
    204c:	cd bf       	out	0x3d, r28	; 61
    204e:	9a 8b       	std	Y+18, r25	; 0x12
    2050:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16];
	itoa(data,buff,10);
    2052:	89 89       	ldd	r24, Y+17	; 0x11
    2054:	9a 89       	ldd	r25, Y+18	; 0x12
    2056:	9e 01       	movw	r18, r28
    2058:	2f 5f       	subi	r18, 0xFF	; 255
    205a:	3f 4f       	sbci	r19, 0xFF	; 255
    205c:	b9 01       	movw	r22, r18
    205e:	4a e0       	ldi	r20, 0x0A	; 10
    2060:	50 e0       	ldi	r21, 0x00	; 0
    2062:	0e 94 83 12 	call	0x2506	; 0x2506 <itoa>
	LCD_displayString(buff);
    2066:	ce 01       	movw	r24, r28
    2068:	01 96       	adiw	r24, 0x01	; 1
    206a:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <LCD_displayString>
}
    206e:	62 96       	adiw	r28, 0x12	; 18
    2070:	0f b6       	in	r0, 0x3f	; 63
    2072:	f8 94       	cli
    2074:	de bf       	out	0x3e, r29	; 62
    2076:	0f be       	out	0x3f, r0	; 63
    2078:	cd bf       	out	0x3d, r28	; 61
    207a:	cf 91       	pop	r28
    207c:	df 91       	pop	r29
    207e:	08 95       	ret

00002080 <LCD_displayStringRowColumn>:
void LCD_displayStringRowColumn(uint8 row, uint8 column , uint8 *string)
{
    2080:	df 93       	push	r29
    2082:	cf 93       	push	r28
    2084:	00 d0       	rcall	.+0      	; 0x2086 <LCD_displayStringRowColumn+0x6>
    2086:	00 d0       	rcall	.+0      	; 0x2088 <LCD_displayStringRowColumn+0x8>
    2088:	cd b7       	in	r28, 0x3d	; 61
    208a:	de b7       	in	r29, 0x3e	; 62
    208c:	89 83       	std	Y+1, r24	; 0x01
    208e:	6a 83       	std	Y+2, r22	; 0x02
    2090:	5c 83       	std	Y+4, r21	; 0x04
    2092:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,column);
    2094:	89 81       	ldd	r24, Y+1	; 0x01
    2096:	6a 81       	ldd	r22, Y+2	; 0x02
    2098:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <LCD_moveCursor>
	LCD_displayString(string);
    209c:	8b 81       	ldd	r24, Y+3	; 0x03
    209e:	9c 81       	ldd	r25, Y+4	; 0x04
    20a0:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <LCD_displayString>
}
    20a4:	0f 90       	pop	r0
    20a6:	0f 90       	pop	r0
    20a8:	0f 90       	pop	r0
    20aa:	0f 90       	pop	r0
    20ac:	cf 91       	pop	r28
    20ae:	df 91       	pop	r29
    20b0:	08 95       	ret

000020b2 <main>:
 */
#include"lcd.h"
#include <util/delay.h>

int main(void)
{
    20b2:	df 93       	push	r29
    20b4:	cf 93       	push	r28
    20b6:	cd b7       	in	r28, 0x3d	; 61
    20b8:	de b7       	in	r29, 0x3e	; 62
    20ba:	e8 97       	sbiw	r28, 0x38	; 56
    20bc:	0f b6       	in	r0, 0x3f	; 63
    20be:	f8 94       	cli
    20c0:	de bf       	out	0x3e, r29	; 62
    20c2:	0f be       	out	0x3f, r0	; 63
    20c4:	cd bf       	out	0x3d, r28	; 61
	LCD_init();
    20c6:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <LCD_init>
	LCD_displayCharacter('F');
    20ca:	86 e4       	ldi	r24, 0x46	; 70
    20cc:	0e 94 a0 0c 	call	0x1940	; 0x1940 <LCD_displayCharacter>
    20d0:	80 e0       	ldi	r24, 0x00	; 0
    20d2:	90 e8       	ldi	r25, 0x80	; 128
    20d4:	ab eb       	ldi	r26, 0xBB	; 187
    20d6:	b4 e4       	ldi	r27, 0x44	; 68
    20d8:	8d ab       	std	Y+53, r24	; 0x35
    20da:	9e ab       	std	Y+54, r25	; 0x36
    20dc:	af ab       	std	Y+55, r26	; 0x37
    20de:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20e0:	6d a9       	ldd	r22, Y+53	; 0x35
    20e2:	7e a9       	ldd	r23, Y+54	; 0x36
    20e4:	8f a9       	ldd	r24, Y+55	; 0x37
    20e6:	98 ad       	ldd	r25, Y+56	; 0x38
    20e8:	20 e0       	ldi	r18, 0x00	; 0
    20ea:	30 e0       	ldi	r19, 0x00	; 0
    20ec:	4a e7       	ldi	r20, 0x7A	; 122
    20ee:	55 e4       	ldi	r21, 0x45	; 69
    20f0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20f4:	dc 01       	movw	r26, r24
    20f6:	cb 01       	movw	r24, r22
    20f8:	89 ab       	std	Y+49, r24	; 0x31
    20fa:	9a ab       	std	Y+50, r25	; 0x32
    20fc:	ab ab       	std	Y+51, r26	; 0x33
    20fe:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2100:	69 a9       	ldd	r22, Y+49	; 0x31
    2102:	7a a9       	ldd	r23, Y+50	; 0x32
    2104:	8b a9       	ldd	r24, Y+51	; 0x33
    2106:	9c a9       	ldd	r25, Y+52	; 0x34
    2108:	20 e0       	ldi	r18, 0x00	; 0
    210a:	30 e0       	ldi	r19, 0x00	; 0
    210c:	40 e8       	ldi	r20, 0x80	; 128
    210e:	5f e3       	ldi	r21, 0x3F	; 63
    2110:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2114:	88 23       	and	r24, r24
    2116:	2c f4       	brge	.+10     	; 0x2122 <main+0x70>
		__ticks = 1;
    2118:	81 e0       	ldi	r24, 0x01	; 1
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	98 ab       	std	Y+48, r25	; 0x30
    211e:	8f a7       	std	Y+47, r24	; 0x2f
    2120:	3f c0       	rjmp	.+126    	; 0x21a0 <main+0xee>
	else if (__tmp > 65535)
    2122:	69 a9       	ldd	r22, Y+49	; 0x31
    2124:	7a a9       	ldd	r23, Y+50	; 0x32
    2126:	8b a9       	ldd	r24, Y+51	; 0x33
    2128:	9c a9       	ldd	r25, Y+52	; 0x34
    212a:	20 e0       	ldi	r18, 0x00	; 0
    212c:	3f ef       	ldi	r19, 0xFF	; 255
    212e:	4f e7       	ldi	r20, 0x7F	; 127
    2130:	57 e4       	ldi	r21, 0x47	; 71
    2132:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2136:	18 16       	cp	r1, r24
    2138:	4c f5       	brge	.+82     	; 0x218c <main+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    213a:	6d a9       	ldd	r22, Y+53	; 0x35
    213c:	7e a9       	ldd	r23, Y+54	; 0x36
    213e:	8f a9       	ldd	r24, Y+55	; 0x37
    2140:	98 ad       	ldd	r25, Y+56	; 0x38
    2142:	20 e0       	ldi	r18, 0x00	; 0
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	40 e2       	ldi	r20, 0x20	; 32
    2148:	51 e4       	ldi	r21, 0x41	; 65
    214a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    214e:	dc 01       	movw	r26, r24
    2150:	cb 01       	movw	r24, r22
    2152:	bc 01       	movw	r22, r24
    2154:	cd 01       	movw	r24, r26
    2156:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    215a:	dc 01       	movw	r26, r24
    215c:	cb 01       	movw	r24, r22
    215e:	98 ab       	std	Y+48, r25	; 0x30
    2160:	8f a7       	std	Y+47, r24	; 0x2f
    2162:	0f c0       	rjmp	.+30     	; 0x2182 <main+0xd0>
    2164:	80 e9       	ldi	r24, 0x90	; 144
    2166:	91 e0       	ldi	r25, 0x01	; 1
    2168:	9e a7       	std	Y+46, r25	; 0x2e
    216a:	8d a7       	std	Y+45, r24	; 0x2d
    216c:	8d a5       	ldd	r24, Y+45	; 0x2d
    216e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2170:	01 97       	sbiw	r24, 0x01	; 1
    2172:	f1 f7       	brne	.-4      	; 0x2170 <main+0xbe>
    2174:	9e a7       	std	Y+46, r25	; 0x2e
    2176:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2178:	8f a5       	ldd	r24, Y+47	; 0x2f
    217a:	98 a9       	ldd	r25, Y+48	; 0x30
    217c:	01 97       	sbiw	r24, 0x01	; 1
    217e:	98 ab       	std	Y+48, r25	; 0x30
    2180:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2182:	8f a5       	ldd	r24, Y+47	; 0x2f
    2184:	98 a9       	ldd	r25, Y+48	; 0x30
    2186:	00 97       	sbiw	r24, 0x00	; 0
    2188:	69 f7       	brne	.-38     	; 0x2164 <main+0xb2>
    218a:	14 c0       	rjmp	.+40     	; 0x21b4 <main+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    218c:	69 a9       	ldd	r22, Y+49	; 0x31
    218e:	7a a9       	ldd	r23, Y+50	; 0x32
    2190:	8b a9       	ldd	r24, Y+51	; 0x33
    2192:	9c a9       	ldd	r25, Y+52	; 0x34
    2194:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2198:	dc 01       	movw	r26, r24
    219a:	cb 01       	movw	r24, r22
    219c:	98 ab       	std	Y+48, r25	; 0x30
    219e:	8f a7       	std	Y+47, r24	; 0x2f
    21a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    21a2:	98 a9       	ldd	r25, Y+48	; 0x30
    21a4:	9c a7       	std	Y+44, r25	; 0x2c
    21a6:	8b a7       	std	Y+43, r24	; 0x2b
    21a8:	8b a5       	ldd	r24, Y+43	; 0x2b
    21aa:	9c a5       	ldd	r25, Y+44	; 0x2c
    21ac:	01 97       	sbiw	r24, 0x01	; 1
    21ae:	f1 f7       	brne	.-4      	; 0x21ac <main+0xfa>
    21b0:	9c a7       	std	Y+44, r25	; 0x2c
    21b2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1500);
	LCD_clearScreen();
    21b4:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <LCD_clearScreen>
	LCD_displayString("I was About to ");
    21b8:	80 e6       	ldi	r24, 0x60	; 96
    21ba:	90 e0       	ldi	r25, 0x00	; 0
    21bc:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <LCD_displayString>
	LCD_moveCursor(1,0);
    21c0:	81 e0       	ldi	r24, 0x01	; 1
    21c2:	60 e0       	ldi	r22, 0x00	; 0
    21c4:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <LCD_moveCursor>
	LCD_displayString("FUCK OFF ");
    21c8:	80 e7       	ldi	r24, 0x70	; 112
    21ca:	90 e0       	ldi	r25, 0x00	; 0
    21cc:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <LCD_displayString>
    21d0:	80 e0       	ldi	r24, 0x00	; 0
    21d2:	90 e8       	ldi	r25, 0x80	; 128
    21d4:	ab eb       	ldi	r26, 0xBB	; 187
    21d6:	b4 e4       	ldi	r27, 0x44	; 68
    21d8:	8f a3       	std	Y+39, r24	; 0x27
    21da:	98 a7       	std	Y+40, r25	; 0x28
    21dc:	a9 a7       	std	Y+41, r26	; 0x29
    21de:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21e0:	6f a1       	ldd	r22, Y+39	; 0x27
    21e2:	78 a5       	ldd	r23, Y+40	; 0x28
    21e4:	89 a5       	ldd	r24, Y+41	; 0x29
    21e6:	9a a5       	ldd	r25, Y+42	; 0x2a
    21e8:	20 e0       	ldi	r18, 0x00	; 0
    21ea:	30 e0       	ldi	r19, 0x00	; 0
    21ec:	4a e7       	ldi	r20, 0x7A	; 122
    21ee:	55 e4       	ldi	r21, 0x45	; 69
    21f0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21f4:	dc 01       	movw	r26, r24
    21f6:	cb 01       	movw	r24, r22
    21f8:	8b a3       	std	Y+35, r24	; 0x23
    21fa:	9c a3       	std	Y+36, r25	; 0x24
    21fc:	ad a3       	std	Y+37, r26	; 0x25
    21fe:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2200:	6b a1       	ldd	r22, Y+35	; 0x23
    2202:	7c a1       	ldd	r23, Y+36	; 0x24
    2204:	8d a1       	ldd	r24, Y+37	; 0x25
    2206:	9e a1       	ldd	r25, Y+38	; 0x26
    2208:	20 e0       	ldi	r18, 0x00	; 0
    220a:	30 e0       	ldi	r19, 0x00	; 0
    220c:	40 e8       	ldi	r20, 0x80	; 128
    220e:	5f e3       	ldi	r21, 0x3F	; 63
    2210:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2214:	88 23       	and	r24, r24
    2216:	2c f4       	brge	.+10     	; 0x2222 <main+0x170>
		__ticks = 1;
    2218:	81 e0       	ldi	r24, 0x01	; 1
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	9a a3       	std	Y+34, r25	; 0x22
    221e:	89 a3       	std	Y+33, r24	; 0x21
    2220:	3f c0       	rjmp	.+126    	; 0x22a0 <main+0x1ee>
	else if (__tmp > 65535)
    2222:	6b a1       	ldd	r22, Y+35	; 0x23
    2224:	7c a1       	ldd	r23, Y+36	; 0x24
    2226:	8d a1       	ldd	r24, Y+37	; 0x25
    2228:	9e a1       	ldd	r25, Y+38	; 0x26
    222a:	20 e0       	ldi	r18, 0x00	; 0
    222c:	3f ef       	ldi	r19, 0xFF	; 255
    222e:	4f e7       	ldi	r20, 0x7F	; 127
    2230:	57 e4       	ldi	r21, 0x47	; 71
    2232:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2236:	18 16       	cp	r1, r24
    2238:	4c f5       	brge	.+82     	; 0x228c <main+0x1da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    223a:	6f a1       	ldd	r22, Y+39	; 0x27
    223c:	78 a5       	ldd	r23, Y+40	; 0x28
    223e:	89 a5       	ldd	r24, Y+41	; 0x29
    2240:	9a a5       	ldd	r25, Y+42	; 0x2a
    2242:	20 e0       	ldi	r18, 0x00	; 0
    2244:	30 e0       	ldi	r19, 0x00	; 0
    2246:	40 e2       	ldi	r20, 0x20	; 32
    2248:	51 e4       	ldi	r21, 0x41	; 65
    224a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    224e:	dc 01       	movw	r26, r24
    2250:	cb 01       	movw	r24, r22
    2252:	bc 01       	movw	r22, r24
    2254:	cd 01       	movw	r24, r26
    2256:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    225a:	dc 01       	movw	r26, r24
    225c:	cb 01       	movw	r24, r22
    225e:	9a a3       	std	Y+34, r25	; 0x22
    2260:	89 a3       	std	Y+33, r24	; 0x21
    2262:	0f c0       	rjmp	.+30     	; 0x2282 <main+0x1d0>
    2264:	80 e9       	ldi	r24, 0x90	; 144
    2266:	91 e0       	ldi	r25, 0x01	; 1
    2268:	98 a3       	std	Y+32, r25	; 0x20
    226a:	8f 8f       	std	Y+31, r24	; 0x1f
    226c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    226e:	98 a1       	ldd	r25, Y+32	; 0x20
    2270:	01 97       	sbiw	r24, 0x01	; 1
    2272:	f1 f7       	brne	.-4      	; 0x2270 <main+0x1be>
    2274:	98 a3       	std	Y+32, r25	; 0x20
    2276:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2278:	89 a1       	ldd	r24, Y+33	; 0x21
    227a:	9a a1       	ldd	r25, Y+34	; 0x22
    227c:	01 97       	sbiw	r24, 0x01	; 1
    227e:	9a a3       	std	Y+34, r25	; 0x22
    2280:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2282:	89 a1       	ldd	r24, Y+33	; 0x21
    2284:	9a a1       	ldd	r25, Y+34	; 0x22
    2286:	00 97       	sbiw	r24, 0x00	; 0
    2288:	69 f7       	brne	.-38     	; 0x2264 <main+0x1b2>
    228a:	14 c0       	rjmp	.+40     	; 0x22b4 <main+0x202>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    228c:	6b a1       	ldd	r22, Y+35	; 0x23
    228e:	7c a1       	ldd	r23, Y+36	; 0x24
    2290:	8d a1       	ldd	r24, Y+37	; 0x25
    2292:	9e a1       	ldd	r25, Y+38	; 0x26
    2294:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2298:	dc 01       	movw	r26, r24
    229a:	cb 01       	movw	r24, r22
    229c:	9a a3       	std	Y+34, r25	; 0x22
    229e:	89 a3       	std	Y+33, r24	; 0x21
    22a0:	89 a1       	ldd	r24, Y+33	; 0x21
    22a2:	9a a1       	ldd	r25, Y+34	; 0x22
    22a4:	9e 8f       	std	Y+30, r25	; 0x1e
    22a6:	8d 8f       	std	Y+29, r24	; 0x1d
    22a8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22aa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    22ac:	01 97       	sbiw	r24, 0x01	; 1
    22ae:	f1 f7       	brne	.-4      	; 0x22ac <main+0x1fa>
    22b0:	9e 8f       	std	Y+30, r25	; 0x1e
    22b2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1500);
	LCD_displayStringRowColumn(0,6,"FUCKIn");
    22b4:	2a e7       	ldi	r18, 0x7A	; 122
    22b6:	30 e0       	ldi	r19, 0x00	; 0
    22b8:	80 e0       	ldi	r24, 0x00	; 0
    22ba:	66 e0       	ldi	r22, 0x06	; 6
    22bc:	a9 01       	movw	r20, r18
    22be:	0e 94 40 10 	call	0x2080	; 0x2080 <LCD_displayStringRowColumn>
    22c2:	80 e0       	ldi	r24, 0x00	; 0
    22c4:	90 e8       	ldi	r25, 0x80	; 128
    22c6:	ab eb       	ldi	r26, 0xBB	; 187
    22c8:	b4 e4       	ldi	r27, 0x44	; 68
    22ca:	89 8f       	std	Y+25, r24	; 0x19
    22cc:	9a 8f       	std	Y+26, r25	; 0x1a
    22ce:	ab 8f       	std	Y+27, r26	; 0x1b
    22d0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22d2:	69 8d       	ldd	r22, Y+25	; 0x19
    22d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22da:	20 e0       	ldi	r18, 0x00	; 0
    22dc:	30 e0       	ldi	r19, 0x00	; 0
    22de:	4a e7       	ldi	r20, 0x7A	; 122
    22e0:	55 e4       	ldi	r21, 0x45	; 69
    22e2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22e6:	dc 01       	movw	r26, r24
    22e8:	cb 01       	movw	r24, r22
    22ea:	8d 8b       	std	Y+21, r24	; 0x15
    22ec:	9e 8b       	std	Y+22, r25	; 0x16
    22ee:	af 8b       	std	Y+23, r26	; 0x17
    22f0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    22f2:	6d 89       	ldd	r22, Y+21	; 0x15
    22f4:	7e 89       	ldd	r23, Y+22	; 0x16
    22f6:	8f 89       	ldd	r24, Y+23	; 0x17
    22f8:	98 8d       	ldd	r25, Y+24	; 0x18
    22fa:	20 e0       	ldi	r18, 0x00	; 0
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	40 e8       	ldi	r20, 0x80	; 128
    2300:	5f e3       	ldi	r21, 0x3F	; 63
    2302:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2306:	88 23       	and	r24, r24
    2308:	2c f4       	brge	.+10     	; 0x2314 <main+0x262>
		__ticks = 1;
    230a:	81 e0       	ldi	r24, 0x01	; 1
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	9c 8b       	std	Y+20, r25	; 0x14
    2310:	8b 8b       	std	Y+19, r24	; 0x13
    2312:	3f c0       	rjmp	.+126    	; 0x2392 <main+0x2e0>
	else if (__tmp > 65535)
    2314:	6d 89       	ldd	r22, Y+21	; 0x15
    2316:	7e 89       	ldd	r23, Y+22	; 0x16
    2318:	8f 89       	ldd	r24, Y+23	; 0x17
    231a:	98 8d       	ldd	r25, Y+24	; 0x18
    231c:	20 e0       	ldi	r18, 0x00	; 0
    231e:	3f ef       	ldi	r19, 0xFF	; 255
    2320:	4f e7       	ldi	r20, 0x7F	; 127
    2322:	57 e4       	ldi	r21, 0x47	; 71
    2324:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2328:	18 16       	cp	r1, r24
    232a:	4c f5       	brge	.+82     	; 0x237e <main+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    232c:	69 8d       	ldd	r22, Y+25	; 0x19
    232e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2330:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2332:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2334:	20 e0       	ldi	r18, 0x00	; 0
    2336:	30 e0       	ldi	r19, 0x00	; 0
    2338:	40 e2       	ldi	r20, 0x20	; 32
    233a:	51 e4       	ldi	r21, 0x41	; 65
    233c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2340:	dc 01       	movw	r26, r24
    2342:	cb 01       	movw	r24, r22
    2344:	bc 01       	movw	r22, r24
    2346:	cd 01       	movw	r24, r26
    2348:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    234c:	dc 01       	movw	r26, r24
    234e:	cb 01       	movw	r24, r22
    2350:	9c 8b       	std	Y+20, r25	; 0x14
    2352:	8b 8b       	std	Y+19, r24	; 0x13
    2354:	0f c0       	rjmp	.+30     	; 0x2374 <main+0x2c2>
    2356:	80 e9       	ldi	r24, 0x90	; 144
    2358:	91 e0       	ldi	r25, 0x01	; 1
    235a:	9a 8b       	std	Y+18, r25	; 0x12
    235c:	89 8b       	std	Y+17, r24	; 0x11
    235e:	89 89       	ldd	r24, Y+17	; 0x11
    2360:	9a 89       	ldd	r25, Y+18	; 0x12
    2362:	01 97       	sbiw	r24, 0x01	; 1
    2364:	f1 f7       	brne	.-4      	; 0x2362 <main+0x2b0>
    2366:	9a 8b       	std	Y+18, r25	; 0x12
    2368:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    236a:	8b 89       	ldd	r24, Y+19	; 0x13
    236c:	9c 89       	ldd	r25, Y+20	; 0x14
    236e:	01 97       	sbiw	r24, 0x01	; 1
    2370:	9c 8b       	std	Y+20, r25	; 0x14
    2372:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2374:	8b 89       	ldd	r24, Y+19	; 0x13
    2376:	9c 89       	ldd	r25, Y+20	; 0x14
    2378:	00 97       	sbiw	r24, 0x00	; 0
    237a:	69 f7       	brne	.-38     	; 0x2356 <main+0x2a4>
    237c:	14 c0       	rjmp	.+40     	; 0x23a6 <main+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    237e:	6d 89       	ldd	r22, Y+21	; 0x15
    2380:	7e 89       	ldd	r23, Y+22	; 0x16
    2382:	8f 89       	ldd	r24, Y+23	; 0x17
    2384:	98 8d       	ldd	r25, Y+24	; 0x18
    2386:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    238a:	dc 01       	movw	r26, r24
    238c:	cb 01       	movw	r24, r22
    238e:	9c 8b       	std	Y+20, r25	; 0x14
    2390:	8b 8b       	std	Y+19, r24	; 0x13
    2392:	8b 89       	ldd	r24, Y+19	; 0x13
    2394:	9c 89       	ldd	r25, Y+20	; 0x14
    2396:	98 8b       	std	Y+16, r25	; 0x10
    2398:	8f 87       	std	Y+15, r24	; 0x0f
    239a:	8f 85       	ldd	r24, Y+15	; 0x0f
    239c:	98 89       	ldd	r25, Y+16	; 0x10
    239e:	01 97       	sbiw	r24, 0x01	; 1
    23a0:	f1 f7       	brne	.-4      	; 0x239e <main+0x2ec>
    23a2:	98 8b       	std	Y+16, r25	; 0x10
    23a4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1500);
	LCD_integerToString(500);
    23a6:	84 ef       	ldi	r24, 0xF4	; 244
    23a8:	91 e0       	ldi	r25, 0x01	; 1
    23aa:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_integerToString>
    23ae:	80 e0       	ldi	r24, 0x00	; 0
    23b0:	90 e8       	ldi	r25, 0x80	; 128
    23b2:	ab eb       	ldi	r26, 0xBB	; 187
    23b4:	b4 e4       	ldi	r27, 0x44	; 68
    23b6:	8b 87       	std	Y+11, r24	; 0x0b
    23b8:	9c 87       	std	Y+12, r25	; 0x0c
    23ba:	ad 87       	std	Y+13, r26	; 0x0d
    23bc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23be:	6b 85       	ldd	r22, Y+11	; 0x0b
    23c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    23c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    23c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    23c6:	20 e0       	ldi	r18, 0x00	; 0
    23c8:	30 e0       	ldi	r19, 0x00	; 0
    23ca:	4a e7       	ldi	r20, 0x7A	; 122
    23cc:	55 e4       	ldi	r21, 0x45	; 69
    23ce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23d2:	dc 01       	movw	r26, r24
    23d4:	cb 01       	movw	r24, r22
    23d6:	8f 83       	std	Y+7, r24	; 0x07
    23d8:	98 87       	std	Y+8, r25	; 0x08
    23da:	a9 87       	std	Y+9, r26	; 0x09
    23dc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23de:	6f 81       	ldd	r22, Y+7	; 0x07
    23e0:	78 85       	ldd	r23, Y+8	; 0x08
    23e2:	89 85       	ldd	r24, Y+9	; 0x09
    23e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    23e6:	20 e0       	ldi	r18, 0x00	; 0
    23e8:	30 e0       	ldi	r19, 0x00	; 0
    23ea:	40 e8       	ldi	r20, 0x80	; 128
    23ec:	5f e3       	ldi	r21, 0x3F	; 63
    23ee:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    23f2:	88 23       	and	r24, r24
    23f4:	2c f4       	brge	.+10     	; 0x2400 <main+0x34e>
		__ticks = 1;
    23f6:	81 e0       	ldi	r24, 0x01	; 1
    23f8:	90 e0       	ldi	r25, 0x00	; 0
    23fa:	9e 83       	std	Y+6, r25	; 0x06
    23fc:	8d 83       	std	Y+5, r24	; 0x05
    23fe:	3f c0       	rjmp	.+126    	; 0x247e <main+0x3cc>
	else if (__tmp > 65535)
    2400:	6f 81       	ldd	r22, Y+7	; 0x07
    2402:	78 85       	ldd	r23, Y+8	; 0x08
    2404:	89 85       	ldd	r24, Y+9	; 0x09
    2406:	9a 85       	ldd	r25, Y+10	; 0x0a
    2408:	20 e0       	ldi	r18, 0x00	; 0
    240a:	3f ef       	ldi	r19, 0xFF	; 255
    240c:	4f e7       	ldi	r20, 0x7F	; 127
    240e:	57 e4       	ldi	r21, 0x47	; 71
    2410:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2414:	18 16       	cp	r1, r24
    2416:	4c f5       	brge	.+82     	; 0x246a <main+0x3b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2418:	6b 85       	ldd	r22, Y+11	; 0x0b
    241a:	7c 85       	ldd	r23, Y+12	; 0x0c
    241c:	8d 85       	ldd	r24, Y+13	; 0x0d
    241e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2420:	20 e0       	ldi	r18, 0x00	; 0
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	40 e2       	ldi	r20, 0x20	; 32
    2426:	51 e4       	ldi	r21, 0x41	; 65
    2428:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    242c:	dc 01       	movw	r26, r24
    242e:	cb 01       	movw	r24, r22
    2430:	bc 01       	movw	r22, r24
    2432:	cd 01       	movw	r24, r26
    2434:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2438:	dc 01       	movw	r26, r24
    243a:	cb 01       	movw	r24, r22
    243c:	9e 83       	std	Y+6, r25	; 0x06
    243e:	8d 83       	std	Y+5, r24	; 0x05
    2440:	0f c0       	rjmp	.+30     	; 0x2460 <main+0x3ae>
    2442:	80 e9       	ldi	r24, 0x90	; 144
    2444:	91 e0       	ldi	r25, 0x01	; 1
    2446:	9c 83       	std	Y+4, r25	; 0x04
    2448:	8b 83       	std	Y+3, r24	; 0x03
    244a:	8b 81       	ldd	r24, Y+3	; 0x03
    244c:	9c 81       	ldd	r25, Y+4	; 0x04
    244e:	01 97       	sbiw	r24, 0x01	; 1
    2450:	f1 f7       	brne	.-4      	; 0x244e <main+0x39c>
    2452:	9c 83       	std	Y+4, r25	; 0x04
    2454:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2456:	8d 81       	ldd	r24, Y+5	; 0x05
    2458:	9e 81       	ldd	r25, Y+6	; 0x06
    245a:	01 97       	sbiw	r24, 0x01	; 1
    245c:	9e 83       	std	Y+6, r25	; 0x06
    245e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2460:	8d 81       	ldd	r24, Y+5	; 0x05
    2462:	9e 81       	ldd	r25, Y+6	; 0x06
    2464:	00 97       	sbiw	r24, 0x00	; 0
    2466:	69 f7       	brne	.-38     	; 0x2442 <main+0x390>
    2468:	14 c0       	rjmp	.+40     	; 0x2492 <main+0x3e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    246a:	6f 81       	ldd	r22, Y+7	; 0x07
    246c:	78 85       	ldd	r23, Y+8	; 0x08
    246e:	89 85       	ldd	r24, Y+9	; 0x09
    2470:	9a 85       	ldd	r25, Y+10	; 0x0a
    2472:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2476:	dc 01       	movw	r26, r24
    2478:	cb 01       	movw	r24, r22
    247a:	9e 83       	std	Y+6, r25	; 0x06
    247c:	8d 83       	std	Y+5, r24	; 0x05
    247e:	8d 81       	ldd	r24, Y+5	; 0x05
    2480:	9e 81       	ldd	r25, Y+6	; 0x06
    2482:	9a 83       	std	Y+2, r25	; 0x02
    2484:	89 83       	std	Y+1, r24	; 0x01
    2486:	89 81       	ldd	r24, Y+1	; 0x01
    2488:	9a 81       	ldd	r25, Y+2	; 0x02
    248a:	01 97       	sbiw	r24, 0x01	; 1
    248c:	f1 f7       	brne	.-4      	; 0x248a <main+0x3d8>
    248e:	9a 83       	std	Y+2, r25	; 0x02
    2490:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1500);
	LCD_clearScreen();
    2492:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <LCD_clearScreen>
    2496:	ff cf       	rjmp	.-2      	; 0x2496 <main+0x3e4>

00002498 <__prologue_saves__>:
    2498:	2f 92       	push	r2
    249a:	3f 92       	push	r3
    249c:	4f 92       	push	r4
    249e:	5f 92       	push	r5
    24a0:	6f 92       	push	r6
    24a2:	7f 92       	push	r7
    24a4:	8f 92       	push	r8
    24a6:	9f 92       	push	r9
    24a8:	af 92       	push	r10
    24aa:	bf 92       	push	r11
    24ac:	cf 92       	push	r12
    24ae:	df 92       	push	r13
    24b0:	ef 92       	push	r14
    24b2:	ff 92       	push	r15
    24b4:	0f 93       	push	r16
    24b6:	1f 93       	push	r17
    24b8:	cf 93       	push	r28
    24ba:	df 93       	push	r29
    24bc:	cd b7       	in	r28, 0x3d	; 61
    24be:	de b7       	in	r29, 0x3e	; 62
    24c0:	ca 1b       	sub	r28, r26
    24c2:	db 0b       	sbc	r29, r27
    24c4:	0f b6       	in	r0, 0x3f	; 63
    24c6:	f8 94       	cli
    24c8:	de bf       	out	0x3e, r29	; 62
    24ca:	0f be       	out	0x3f, r0	; 63
    24cc:	cd bf       	out	0x3d, r28	; 61
    24ce:	09 94       	ijmp

000024d0 <__epilogue_restores__>:
    24d0:	2a 88       	ldd	r2, Y+18	; 0x12
    24d2:	39 88       	ldd	r3, Y+17	; 0x11
    24d4:	48 88       	ldd	r4, Y+16	; 0x10
    24d6:	5f 84       	ldd	r5, Y+15	; 0x0f
    24d8:	6e 84       	ldd	r6, Y+14	; 0x0e
    24da:	7d 84       	ldd	r7, Y+13	; 0x0d
    24dc:	8c 84       	ldd	r8, Y+12	; 0x0c
    24de:	9b 84       	ldd	r9, Y+11	; 0x0b
    24e0:	aa 84       	ldd	r10, Y+10	; 0x0a
    24e2:	b9 84       	ldd	r11, Y+9	; 0x09
    24e4:	c8 84       	ldd	r12, Y+8	; 0x08
    24e6:	df 80       	ldd	r13, Y+7	; 0x07
    24e8:	ee 80       	ldd	r14, Y+6	; 0x06
    24ea:	fd 80       	ldd	r15, Y+5	; 0x05
    24ec:	0c 81       	ldd	r16, Y+4	; 0x04
    24ee:	1b 81       	ldd	r17, Y+3	; 0x03
    24f0:	aa 81       	ldd	r26, Y+2	; 0x02
    24f2:	b9 81       	ldd	r27, Y+1	; 0x01
    24f4:	ce 0f       	add	r28, r30
    24f6:	d1 1d       	adc	r29, r1
    24f8:	0f b6       	in	r0, 0x3f	; 63
    24fa:	f8 94       	cli
    24fc:	de bf       	out	0x3e, r29	; 62
    24fe:	0f be       	out	0x3f, r0	; 63
    2500:	cd bf       	out	0x3d, r28	; 61
    2502:	ed 01       	movw	r28, r26
    2504:	08 95       	ret

00002506 <itoa>:
    2506:	fb 01       	movw	r30, r22
    2508:	9f 01       	movw	r18, r30
    250a:	e8 94       	clt
    250c:	42 30       	cpi	r20, 0x02	; 2
    250e:	c4 f0       	brlt	.+48     	; 0x2540 <itoa+0x3a>
    2510:	45 32       	cpi	r20, 0x25	; 37
    2512:	b4 f4       	brge	.+44     	; 0x2540 <itoa+0x3a>
    2514:	4a 30       	cpi	r20, 0x0A	; 10
    2516:	29 f4       	brne	.+10     	; 0x2522 <itoa+0x1c>
    2518:	97 fb       	bst	r25, 7
    251a:	1e f4       	brtc	.+6      	; 0x2522 <itoa+0x1c>
    251c:	90 95       	com	r25
    251e:	81 95       	neg	r24
    2520:	9f 4f       	sbci	r25, 0xFF	; 255
    2522:	64 2f       	mov	r22, r20
    2524:	77 27       	eor	r23, r23
    2526:	0e 94 b4 12 	call	0x2568	; 0x2568 <__udivmodhi4>
    252a:	80 5d       	subi	r24, 0xD0	; 208
    252c:	8a 33       	cpi	r24, 0x3A	; 58
    252e:	0c f0       	brlt	.+2      	; 0x2532 <itoa+0x2c>
    2530:	89 5d       	subi	r24, 0xD9	; 217
    2532:	81 93       	st	Z+, r24
    2534:	cb 01       	movw	r24, r22
    2536:	00 97       	sbiw	r24, 0x00	; 0
    2538:	a1 f7       	brne	.-24     	; 0x2522 <itoa+0x1c>
    253a:	16 f4       	brtc	.+4      	; 0x2540 <itoa+0x3a>
    253c:	5d e2       	ldi	r21, 0x2D	; 45
    253e:	51 93       	st	Z+, r21
    2540:	10 82       	st	Z, r1
    2542:	c9 01       	movw	r24, r18
    2544:	0c 94 a4 12 	jmp	0x2548	; 0x2548 <strrev>

00002548 <strrev>:
    2548:	dc 01       	movw	r26, r24
    254a:	fc 01       	movw	r30, r24
    254c:	67 2f       	mov	r22, r23
    254e:	71 91       	ld	r23, Z+
    2550:	77 23       	and	r23, r23
    2552:	e1 f7       	brne	.-8      	; 0x254c <strrev+0x4>
    2554:	32 97       	sbiw	r30, 0x02	; 2
    2556:	04 c0       	rjmp	.+8      	; 0x2560 <strrev+0x18>
    2558:	7c 91       	ld	r23, X
    255a:	6d 93       	st	X+, r22
    255c:	70 83       	st	Z, r23
    255e:	62 91       	ld	r22, -Z
    2560:	ae 17       	cp	r26, r30
    2562:	bf 07       	cpc	r27, r31
    2564:	c8 f3       	brcs	.-14     	; 0x2558 <strrev+0x10>
    2566:	08 95       	ret

00002568 <__udivmodhi4>:
    2568:	aa 1b       	sub	r26, r26
    256a:	bb 1b       	sub	r27, r27
    256c:	51 e1       	ldi	r21, 0x11	; 17
    256e:	07 c0       	rjmp	.+14     	; 0x257e <__udivmodhi4_ep>

00002570 <__udivmodhi4_loop>:
    2570:	aa 1f       	adc	r26, r26
    2572:	bb 1f       	adc	r27, r27
    2574:	a6 17       	cp	r26, r22
    2576:	b7 07       	cpc	r27, r23
    2578:	10 f0       	brcs	.+4      	; 0x257e <__udivmodhi4_ep>
    257a:	a6 1b       	sub	r26, r22
    257c:	b7 0b       	sbc	r27, r23

0000257e <__udivmodhi4_ep>:
    257e:	88 1f       	adc	r24, r24
    2580:	99 1f       	adc	r25, r25
    2582:	5a 95       	dec	r21
    2584:	a9 f7       	brne	.-22     	; 0x2570 <__udivmodhi4_loop>
    2586:	80 95       	com	r24
    2588:	90 95       	com	r25
    258a:	bc 01       	movw	r22, r24
    258c:	cd 01       	movw	r24, r26
    258e:	08 95       	ret

00002590 <_exit>:
    2590:	f8 94       	cli

00002592 <__stop_program>:
    2592:	ff cf       	rjmp	.-2      	; 0x2592 <__stop_program>
